/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Fiddl.art API
 * OpenAPI spec version: 1.0.0
 */
import { fetcher } from './fetcher.ts';
export type ErrorBADREQUESTIssuesItem = {
  message: string;
};

/**
 * The error information
 */
export interface ErrorBADREQUEST {
  /** The error message */
  message: string;
  /** The error code */
  code: string;
  /** An array of issues that were responsible for the error */
  issues?: ErrorBADREQUESTIssuesItem[];
}

export type ErrorUNAUTHORIZEDIssuesItem = {
  message: string;
};

/**
 * The error information
 */
export interface ErrorUNAUTHORIZED {
  /** The error message */
  message: string;
  /** The error code */
  code: string;
  /** An array of issues that were responsible for the error */
  issues?: ErrorUNAUTHORIZEDIssuesItem[];
}

export type ErrorFORBIDDENIssuesItem = {
  message: string;
};

/**
 * The error information
 */
export interface ErrorFORBIDDEN {
  /** The error message */
  message: string;
  /** The error code */
  code: string;
  /** An array of issues that were responsible for the error */
  issues?: ErrorFORBIDDENIssuesItem[];
}

export type ErrorINTERNALSERVERERRORIssuesItem = {
  message: string;
};

/**
 * The error information
 */
export interface ErrorINTERNALSERVERERROR {
  /** The error message */
  message: string;
  /** The error code */
  code: string;
  /** An array of issues that were responsible for the error */
  issues?: ErrorINTERNALSERVERERRORIssuesItem[];
}

export type ErrorNOTFOUNDIssuesItem = {
  message: string;
};

/**
 * The error information
 */
export interface ErrorNOTFOUND {
  /** The error message */
  message: string;
  /** The error code */
  code: string;
  /** An array of issues that were responsible for the error */
  issues?: ErrorNOTFOUNDIssuesItem[];
}

export type PkAuthRegisterStartBody = {
  email?: string;
  phone?: string;
  referredByUserName?: string;
};

export type PkAuthRegisterFinishBody = {
  userId: string;
  data?: unknown;
};

export type PkAuthLoginStartBody = {
  userId: string;
};

export type PkAuthLoginFinishBody = {
  userId: string;
  data?: unknown;
};

export type CreateImageBodyModel = typeof CreateImageBodyModel[keyof typeof CreateImageBodyModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImageBodyModel = {
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const;

export type CreateImageBodyAspectRatio = typeof CreateImageBodyAspectRatio[keyof typeof CreateImageBodyAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImageBodyAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreateImageBody = {
  prompt: string;
  negativePrompt?: string;
  /**
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  seed?: number;
  model: CreateImageBodyModel;
  public?: boolean;
  aspectRatio?: CreateImageBodyAspectRatio;
  customModelId?: string;
  uploadedStartImageIds?: string[];
};

export type CreateImage200 = {
  ids: string[];
  id: string;
  errors: string[];
};

export type CreateVideoBodyModel = typeof CreateVideoBodyModel[keyof typeof CreateVideoBodyModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateVideoBodyModel = {
  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
} as const;

export type CreateVideoBodyAspectRatio = typeof CreateVideoBodyAspectRatio[keyof typeof CreateVideoBodyAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateVideoBodyAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreateVideoBody = {
  prompt: string;
  /**
   * @minimum 1
   * @maximum 5
   */
  quantity: number;
  seed?: number;
  model: CreateVideoBodyModel;
  public: boolean;
  aspectRatio: CreateVideoBodyAspectRatio;
  duration: number;
  startImageId?: string;
  uploadedStartImageId?: string;
};

export type CreateVideo200VideosItemStatus = typeof CreateVideo200VideosItemStatus[keyof typeof CreateVideo200VideosItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateVideo200VideosItemStatus = {
  processing: 'processing',
  previewRendering: 'previewRendering',
  ready: 'ready',
  errored: 'errored',
} as const;

export type CreateVideo200VideosItem = {
  status: CreateVideo200VideosItemStatus;
  id: string;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  seed: string | null;
  errored: boolean;
  deleted: boolean;
  videoRequestId: string;
  /** @nullable */
  replicatePredictionId: string | null;
  /** @nullable */
  coconutJobId: string | null;
  /** @nullable */
  errorMessage: string | null;
};

export type CreateVideo200 = {
  id: string;
  userId: string;
  prompt: string;
  model: string;
  aspectRatio: string;
  duration: number;
  /** @nullable */
  seed: string | null;
  /** @nullable */
  negativePrompt: string | null;
  quantity: number;
  createdAt: string;
  updatedAt: string;
  public: boolean;
  deleted: boolean;
  /** @nullable */
  error: string | null;
  /** @nullable */
  startImageId: string | null;
  /** @nullable */
  uploadedStartImageId: string | null;
  videos: CreateVideo200VideosItem[];
};

export type CreateRandomPromptBodyType = typeof CreateRandomPromptBodyType[keyof typeof CreateRandomPromptBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRandomPromptBodyType = {
  image: 'image',
  video: 'video',
} as const;

export type CreateRandomPromptBody = {
  theme?: string;
  type?: CreateRandomPromptBodyType;
};

export type CreateImprovePromptBodyType = typeof CreateImprovePromptBodyType[keyof typeof CreateImprovePromptBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateImprovePromptBodyType = {
  image: 'image',
  video: 'video',
} as const;

export type CreateImprovePromptBody = {
  prompt: string;
  type?: CreateImprovePromptBodyType;
};

export type CreateUploadImageBodyFileType = typeof CreateUploadImageBodyFileType[keyof typeof CreateUploadImageBodyFileType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUploadImageBodyFileType = {
  'image/jpeg': 'image/jpeg',
  'image/png': 'image/png',
  'image/webp': 'image/webp',
  'image/gif': 'image/gif',
} as const;

export type CreateUploadImageBody = {
  fileType: CreateUploadImageBodyFileType;
};

export type CreateUploadImage200UploadUrlFields = {[key: string]: string};

export type CreateUploadImage200UploadUrl = {
  url: string;
  fields: CreateUploadImage200UploadUrlFields;
};

export type CreateUploadImage200 = {
  uploadUrl: CreateUploadImage200UploadUrl;
  imageId: string;
};

export type CreateQueueAsyncBatchBodyRequestsItemAnyOfModel = typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfModel[keyof typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQueueAsyncBatchBodyRequestsItemAnyOfModel = {
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const;

export type CreateQueueAsyncBatchBodyRequestsItemAnyOfAspectRatio = typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfAspectRatio[keyof typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQueueAsyncBatchBodyRequestsItemAnyOfAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreateQueueAsyncBatchBodyRequestsItemAnyOf = {
  prompt: string;
  negativePrompt?: string;
  /**
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  seed?: number;
  model: CreateQueueAsyncBatchBodyRequestsItemAnyOfModel;
  public?: boolean;
  aspectRatio?: CreateQueueAsyncBatchBodyRequestsItemAnyOfAspectRatio;
  customModelId?: string;
  uploadedStartImageIds?: string[];
};

export type CreateQueueAsyncBatchBodyRequestsItemAnyOfFourModel = typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfFourModel[keyof typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfFourModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQueueAsyncBatchBodyRequestsItemAnyOfFourModel = {
  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
} as const;

export type CreateQueueAsyncBatchBodyRequestsItemAnyOfFourAspectRatio = typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfFourAspectRatio[keyof typeof CreateQueueAsyncBatchBodyRequestsItemAnyOfFourAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQueueAsyncBatchBodyRequestsItemAnyOfFourAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreateQueueAsyncBatchBodyRequestsItemAnyOfFour = {
  prompt: string;
  /**
   * @minimum 1
   * @maximum 5
   */
  quantity: number;
  seed?: number;
  model: CreateQueueAsyncBatchBodyRequestsItemAnyOfFourModel;
  public: boolean;
  aspectRatio: CreateQueueAsyncBatchBodyRequestsItemAnyOfFourAspectRatio;
  duration: number;
  startImageId?: string;
  uploadedStartImageId?: string;
};

export type CreateQueueAsyncBatchBodyRequestsItem = CreateQueueAsyncBatchBodyRequestsItemAnyOf | CreateQueueAsyncBatchBodyRequestsItemAnyOfFour;

export type CreateQueueAsyncBatchBody = {
  /** @minItems 1 */
  requests: CreateQueueAsyncBatchBodyRequestsItem[];
  emailNotify?: boolean;
};

export type CreateQueueAsyncBatch200 = {
  batchId: string;
  accepted: number;
};

export type CreationsGetCreationDataParams = {
imageId?: string;
videoId?: string;
};

export type CreationsGetCreationData200 = {
  id: string;
  createdAt: string;
  requestId: string;
  seed?: number;
  creatorId: string;
  numCollections: number;
};

export type CreationsUserImagePurchasesParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: CreationsUserImagePurchasesOrder;
endDateTime?: string;
customModelId?: string;
model?: typeof CreationsUserImagePurchasesModel[keyof typeof CreationsUserImagePurchasesModel] ;
aspectRatio?: CreationsUserImagePurchasesAspectRatio;
promptIncludes?: string;
};

export type CreationsUserImagePurchasesOrder = typeof CreationsUserImagePurchasesOrder[keyof typeof CreationsUserImagePurchasesOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserImagePurchasesOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserImagePurchasesModel = {  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const
export type CreationsUserImagePurchasesAspectRatio = typeof CreationsUserImagePurchasesAspectRatio[keyof typeof CreationsUserImagePurchasesAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserImagePurchasesAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreationsUserImagePurchases200Item = {
  id: string;
  userId: string;
  imageId: string;
  createdAt: string;
};

export type CreationsUserVideoPurchasesParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: CreationsUserVideoPurchasesOrder;
endDateTime?: string;
customModelId?: string;
model?: typeof CreationsUserVideoPurchasesModel[keyof typeof CreationsUserVideoPurchasesModel] ;
aspectRatio?: CreationsUserVideoPurchasesAspectRatio;
promptIncludes?: string;
};

export type CreationsUserVideoPurchasesOrder = typeof CreationsUserVideoPurchasesOrder[keyof typeof CreationsUserVideoPurchasesOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserVideoPurchasesOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserVideoPurchasesModel = {  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const
export type CreationsUserVideoPurchasesAspectRatio = typeof CreationsUserVideoPurchasesAspectRatio[keyof typeof CreationsUserVideoPurchasesAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsUserVideoPurchasesAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreationsUserVideoPurchases200Item = {
  id: string;
  userId: string;
  videoId: string;
  createdAt: string;
};

export type CreationsCreateImageRequestsParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: CreationsCreateImageRequestsOrder;
endDateTime?: string;
customModelId?: string;
model?: typeof CreationsCreateImageRequestsModel[keyof typeof CreationsCreateImageRequestsModel] ;
aspectRatio?: CreationsCreateImageRequestsAspectRatio;
promptIncludes?: string;
};

export type CreationsCreateImageRequestsOrder = typeof CreationsCreateImageRequestsOrder[keyof typeof CreationsCreateImageRequestsOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateImageRequestsOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateImageRequestsModel = {  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const
export type CreationsCreateImageRequestsAspectRatio = typeof CreationsCreateImageRequestsAspectRatio[keyof typeof CreationsCreateImageRequestsAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateImageRequestsAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreationsCreateImageRequests200Item = {
  id: string;
  imageIds: string[];
  createdAt: string;
  aspectRatio: string;
  public: boolean;
  creatorId: string;
  creatorUsername: string;
  model?: string;
  seed?: number;
  prompt?: string;
  negativePrompt?: string;
  quantity: number;
  customModelId?: string;
  customModelName?: string;
  meta?: string;
};

export type CreationsCreateVideoRequestsParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: CreationsCreateVideoRequestsOrder;
endDateTime?: string;
customModelId?: string;
model?: typeof CreationsCreateVideoRequestsModel[keyof typeof CreationsCreateVideoRequestsModel] ;
aspectRatio?: CreationsCreateVideoRequestsAspectRatio;
promptIncludes?: string;
};

export type CreationsCreateVideoRequestsOrder = typeof CreationsCreateVideoRequestsOrder[keyof typeof CreationsCreateVideoRequestsOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateVideoRequestsOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateVideoRequestsModel = {  'veo-2': 'veo-2',
  'veo-3': 'veo-3',
  'seedance-pro': 'seedance-pro',
  'seedance-lite': 'seedance-lite',
  kling: 'kling',
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const
export type CreationsCreateVideoRequestsAspectRatio = typeof CreationsCreateVideoRequestsAspectRatio[keyof typeof CreationsCreateVideoRequestsAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsCreateVideoRequestsAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreationsCreateVideoRequests200Item = {
  id: string;
  videoIds: string[];
  createdAt: string;
  aspectRatio: string;
  public: boolean;
  creatorId: string;
  creatorUsername: string;
  model?: string;
  seed?: number;
  prompt?: string;
  meta?: string;
  duration?: number;
  quantity: number;
  startImageId?: string;
  uploadedStartImageId?: string;
};

export type CreationsGetImageRequestParams = {
imageRequestId: string;
};

export type CreationsGetImageRequest200 = {
  id: string;
  imageIds: string[];
  createdAt: string;
  aspectRatio: string;
  public: boolean;
  creatorId: string;
  creatorUsername: string;
  model?: string;
  seed?: number;
  prompt?: string;
  negativePrompt?: string;
  quantity: number;
  customModelId?: string;
  customModelName?: string;
  meta?: string;
};

export type CreationsGetVideoRequestParams = {
videoRequestId: string;
};

export type CreationsGetVideoRequest200 = {
  id: string;
  videoIds: string[];
  createdAt: string;
  aspectRatio: string;
  public: boolean;
  creatorId: string;
  creatorUsername: string;
  model?: string;
  seed?: number;
  prompt?: string;
  meta?: string;
  duration?: number;
  quantity: number;
  startImageId?: string;
  uploadedStartImageId?: string;
};

export type CreationsBrowseCreateRequestsParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: CreationsBrowseCreateRequestsOrder;
endDateTime?: string;
promptIncludes?: string;
model?: CreationsBrowseCreateRequestsModel;
aspectRatio?: CreationsBrowseCreateRequestsAspectRatio;
customModelId?: string;
randomSeed?: number;
sortMethod: CreationsBrowseCreateRequestsSortMethod;
mediaType?: CreationsBrowseCreateRequestsMediaType;
};

export type CreationsBrowseCreateRequestsOrder = typeof CreationsBrowseCreateRequestsOrder[keyof typeof CreationsBrowseCreateRequestsOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsBrowseCreateRequestsOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type CreationsBrowseCreateRequestsModel = typeof CreationsBrowseCreateRequestsModel[keyof typeof CreationsBrowseCreateRequestsModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsBrowseCreateRequestsModel = {
  ultra: 'ultra',
  'sd3-lg': 'sd3-lg',
  core: 'core',
  'dall-e-3': 'dall-e-3',
  'flux-pro-ultra': 'flux-pro-ultra',
  'flux-dev': 'flux-dev',
  'flux-pro': 'flux-pro',
  custom: 'custom',
  imagen4: 'imagen4',
  'imagen4-ultra': 'imagen4-ultra',
  photon: 'photon',
  recraft3: 'recraft3',
  'recraft3-svg': 'recraft3-svg',
  'gpt-image-1': 'gpt-image-1',
  seedream3: 'seedream3',
  'nano-banana': 'nano-banana',
} as const;

export type CreationsBrowseCreateRequestsAspectRatio = typeof CreationsBrowseCreateRequestsAspectRatio[keyof typeof CreationsBrowseCreateRequestsAspectRatio];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsBrowseCreateRequestsAspectRatio = {
  '16:9': '16:9',
  '1:1': '1:1',
  '21:9': '21:9',
  '2:3': '2:3',
  '3:2': '3:2',
  '4:5': '4:5',
  '5:4': '5:4',
  '9:16': '9:16',
  '9:21': '9:21',
  '3:4': '3:4',
  '4:3': '4:3',
} as const;

export type CreationsBrowseCreateRequestsSortMethod = typeof CreationsBrowseCreateRequestsSortMethod[keyof typeof CreationsBrowseCreateRequestsSortMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsBrowseCreateRequestsSortMethod = {
  latest: 'latest',
  shuffle: 'shuffle',
  popular: 'popular',
} as const;

export type CreationsBrowseCreateRequestsMediaType = typeof CreationsBrowseCreateRequestsMediaType[keyof typeof CreationsBrowseCreateRequestsMediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsBrowseCreateRequestsMediaType = {
  image: 'image',
  video: 'video',
  all: 'all',
} as const;

export type CreationsHdImageParams = {
imageId: string;
download?: boolean;
};

export type CreationsHdVideoParams = {
videoId: string;
download?: boolean;
};

export type CreationsImageSecretParams = {
imageId: string;
};

export type CreationsOriginalImageParams = {
imageId: string;
};

export type CreationsUpscaledImageParams = {
imageId: string;
};

export type CreationsPurchaseMediaBody = {
  imageId?: string;
  videoId?: string;
};

export type CreationsDeleteMediaBody = {
  imageId?: string;
  videoId?: string;
};

export type CreationsDeleteRequestBody = {
  videoRequestId?: string;
  imageRequestId?: string;
};

export type CreationsSetRequestPrivacyBody = {
  videoRequestId?: string;
  imageRequestId?: string;
  public: boolean;
};

export type CreationsGetUserUploadedImagesParams = {
limit?: number;
};

export type CreationsDeleteUploadedImageBody = {
  imageId: string;
};

export type CreationsDescribeUploadedImageParams = {
imageId: string;
};

/**
 * @nullable
 */
export type CreationsDescribeUploadedImage200SubjectGender = typeof CreationsDescribeUploadedImage200SubjectGender[keyof typeof CreationsDescribeUploadedImage200SubjectGender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsDescribeUploadedImage200SubjectGender = {
  male: 'male',
  female: 'female',
  unknown: 'unknown',
} as const;

/**
 * @nullable
 */
export type CreationsDescribeUploadedImage200SubjectCategory = typeof CreationsDescribeUploadedImage200SubjectCategory[keyof typeof CreationsDescribeUploadedImage200SubjectCategory] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreationsDescribeUploadedImage200SubjectCategory = {
  human: 'human',
  animal: 'animal',
  object: 'object',
  architecture: 'architecture',
  setting: 'setting',
  style: 'style',
  dog: 'dog',
  cat: 'cat',
  other: 'other',
} as const;

export type CreationsDescribeUploadedImage200 = {
  /** @nullable */
  subjectGender: CreationsDescribeUploadedImage200SubjectGender;
  /** @nullable */
  subjectCategory: CreationsDescribeUploadedImage200SubjectCategory;
  id: string;
  createdAt: string;
  userId: string;
  /** @nullable */
  subjectDescription: string | null;
};

export type PointsPackagesAvailable200Item = {
  points: number;
  discountPct: number;
  usd: number;
};

export type PointsPrices200ImageModel = {
  ultra: number;
  'sd3-lg': number;
  core: number;
  'dall-e-3': number;
  'flux-pro-ultra': number;
  'flux-dev': number;
  'flux-pro': number;
  custom: number;
  imagen4: number;
  'imagen4-ultra': number;
  photon: number;
  recraft3: number;
  'recraft3-svg': number;
  'gpt-image-1': number;
  seedream3: number;
  'nano-banana': number;
};

export type PointsPrices200Image = {
  unlock: number;
  unlockCommission: number;
  model: PointsPrices200ImageModel;
  uploadSoloImage: number;
};

export type PointsPrices200ForgeTrainBaseModel = {
  fluxDev: number;
  fluxPro: number;
  fluxProUltra: number;
  faceClone: number;
  faceForge: number;
};

export type PointsPrices200ForgeFineTuneType = {
  lora: number;
  full: number;
};

export type PointsPrices200Forge = {
  createTrainingSet: number;
  trainBaseModel: PointsPrices200ForgeTrainBaseModel;
  fineTuneType: PointsPrices200ForgeFineTuneType;
  customModelCharge: number;
  customModelOwnerComission: number;
};

export type PointsPrices200VideoModel = {
  'veo-2': number;
  'veo-3': number;
  'seedance-pro': number;
  'seedance-lite': number;
  kling: number;
};

export type PointsPrices200Video = {
  unlock: number;
  unlockCommission: number;
  model: PointsPrices200VideoModel;
};

export type PointsPrices200SocialRewards = {
  linkEmail: number;
  linkTwitter: number;
  linkGoogle: number;
  linkPhone: number;
  linkTelegram: number;
};

export type PointsPrices200PromptTools = {
  improvePrompt: number;
  randomPrompt: number;
};

export type PointsPrices200 = {
  image: PointsPrices200Image;
  forge: PointsPrices200Forge;
  video: PointsPrices200Video;
  socialRewards: PointsPrices200SocialRewards;
  promptTools: PointsPrices200PromptTools;
};

export type PointsInitBuyPackageBodyMethod = typeof PointsInitBuyPackageBodyMethod[keyof typeof PointsInitBuyPackageBodyMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsInitBuyPackageBodyMethod = {
  payPal: 'payPal',
  stripe: 'stripe',
  applePay: 'applePay',
  googlePay: 'googlePay',
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsInitBuyPackageBody = {
  packageId: number;
  method: PointsInitBuyPackageBodyMethod;
};

export type PointsInitBuyPackage200AnyOfLinksItem = {
  href: string;
  rel: string;
  method: string;
};

export type PointsInitBuyPackage200AnyOf = {
  id: string;
  status: string;
  links: PointsInitBuyPackage200AnyOfLinksItem[];
};

export type PointsInitBuyPackage200AnyOfThreeChainName = typeof PointsInitBuyPackage200AnyOfThreeChainName[keyof typeof PointsInitBuyPackage200AnyOfThreeChainName];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsInitBuyPackage200AnyOfThreeChainName = {
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsInitBuyPackage200AnyOfThreeTokenType = typeof PointsInitBuyPackage200AnyOfThreeTokenType[keyof typeof PointsInitBuyPackage200AnyOfThreeTokenType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsInitBuyPackage200AnyOfThreeTokenType = {
  TLOS: 'TLOS',
} as const;

export type PointsInitBuyPackage200AnyOfThree = {
  chainName: PointsInitBuyPackage200AnyOfThreeChainName;
  tokenType: PointsInitBuyPackage200AnyOfThreeTokenType;
  id: string;
  userId: string;
  tokenAmount: number;
  usdValue: number;
  fee: number;
  /** @nullable */
  transactionId: string | null;
  /** @nullable */
  transactionTime: string | null;
  /** @nullable */
  blockNumber: number | null;
  /** @nullable */
  memo: string | null;
  /** @nullable */
  senderWallet: string | null;
  destWallet: string;
  confirmed: boolean;
  /** @nullable */
  pointsGranted: number | null;
  createdAt: string;
  /** @nullable */
  updatedAt: string | null;
};

export type PointsInitBuyPackage200 = PointsInitBuyPackage200AnyOf | PointsInitBuyPackage200AnyOfThree;

export type PointsFinishBuyPackageBodyMethod = typeof PointsFinishBuyPackageBodyMethod[keyof typeof PointsFinishBuyPackageBodyMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsFinishBuyPackageBodyMethod = {
  payPal: 'payPal',
  stripe: 'stripe',
  applePay: 'applePay',
  googlePay: 'googlePay',
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsFinishBuyPackageBody = {
  orderId: string;
  method: PointsFinishBuyPackageBodyMethod;
  trackingId?: string;
};

export type PointsFinishBuyPackage200AnyOfPurchaseUnitsItemAmount = {
  currency_code: string;
  value: string;
};

export type PointsFinishBuyPackage200AnyOfPurchaseUnitsItem = {
  reference_id: string;
  amount: PointsFinishBuyPackage200AnyOfPurchaseUnitsItemAmount;
};

export type PointsFinishBuyPackage200AnyOf = {
  id: string;
  status: string;
  purchase_units: PointsFinishBuyPackage200AnyOfPurchaseUnitsItem[];
};

export type PointsFinishBuyPackage200AnyOfFour = {
  status: string;
};

export type PointsFinishBuyPackage200 = PointsFinishBuyPackage200AnyOf | PointsFinishBuyPackage200AnyOfFour;

export type PointsGetOrders200PayPalOrdersItem = {
  id: string;
  orderID: string;
  amount: number;
  currency: string;
  status: string;
  createdAt: string;
  updatedAt: string;
};

export type PointsGetOrders200CryptoOrdersItemChainName = typeof PointsGetOrders200CryptoOrdersItemChainName[keyof typeof PointsGetOrders200CryptoOrdersItemChainName];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsGetOrders200CryptoOrdersItemChainName = {
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsGetOrders200CryptoOrdersItem = {
  id: string;
  chainName: PointsGetOrders200CryptoOrdersItemChainName;
  tokenAmount: number;
  usdValue: number;
  confirmed: boolean;
  /** @nullable */
  transactionId: string | null;
  /** @nullable */
  memo: string | null;
  /** @nullable */
  senderWallet: string | null;
  destWallet: string;
  createdAt: string;
  /** @nullable */
  updatedAt: string | null;
};

export type PointsGetOrders200 = {
  payPalOrders: PointsGetOrders200PayPalOrdersItem[];
  cryptoOrders: PointsGetOrders200CryptoOrdersItem[];
};

export type PointsGetOrderParams = {
id: string;
method: PointsGetOrderMethod;
};

export type PointsGetOrderMethod = typeof PointsGetOrderMethod[keyof typeof PointsGetOrderMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsGetOrderMethod = {
  payPal: 'payPal',
  stripe: 'stripe',
  applePay: 'applePay',
  googlePay: 'googlePay',
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsGetOrder200AnyOf = {
  id: string;
  userId: string;
  orderID: string;
  amount: number;
  currency: string;
  status: string;
  packageDetailsJSON: string;
  /** @nullable */
  orderDataJSON: string | null;
  createdAt: string;
  updatedAt: string;
};

export type PointsGetOrder200AnyOfTwoChainName = typeof PointsGetOrder200AnyOfTwoChainName[keyof typeof PointsGetOrder200AnyOfTwoChainName];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsGetOrder200AnyOfTwoChainName = {
  telosNative: 'telosNative',
  telosEVM: 'telosEVM',
} as const;

export type PointsGetOrder200AnyOfTwoTokenType = typeof PointsGetOrder200AnyOfTwoTokenType[keyof typeof PointsGetOrder200AnyOfTwoTokenType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointsGetOrder200AnyOfTwoTokenType = {
  TLOS: 'TLOS',
} as const;

export type PointsGetOrder200AnyOfTwo = {
  chainName: PointsGetOrder200AnyOfTwoChainName;
  tokenType: PointsGetOrder200AnyOfTwoTokenType;
  id: string;
  userId: string;
  tokenAmount: number;
  usdValue: number;
  fee: number;
  /** @nullable */
  transactionId: string | null;
  /** @nullable */
  transactionTime: string | null;
  /** @nullable */
  blockNumber: number | null;
  /** @nullable */
  memo: string | null;
  /** @nullable */
  senderWallet: string | null;
  destWallet: string;
  confirmed: boolean;
  /** @nullable */
  pointsGranted: number | null;
  createdAt: string;
  /** @nullable */
  updatedAt: string | null;
};

export type PointsGetOrder200 = PointsGetOrder200AnyOf | PointsGetOrder200AnyOfTwo;

export type UserGetParams = {
userId: string;
};

/**
 * @nullable
 */
export type UserGet200AvatarConfig = {
  imageId: string;
} | null;

export type UserGet200 = {
  id: string;
  /** @nullable */
  webauthnUserID: string | null;
  /** @nullable */
  currentPassKeyChallenge: string | null;
  availablePoints: number;
  createdAt: string;
  updatedAt: string;
  spentPoints: number;
  admin: boolean;
  /** @nullable */
  referredById: string | null;
  lastNotificationSent: string;
  /** @nullable */
  privyId: string | null;
  /** @nullable */
  AvatarConfig: UserGet200AvatarConfig;
};

export type UserProfileParams = {
userId: string;
};

export type UserProfile200 = {
  userId: string;
  /** @nullable */
  username: string | null;
  /** @nullable */
  email: string | null;
  emailVerified: boolean;
  /** @nullable */
  phone: string | null;
  phoneVerified: boolean;
  /** @nullable */
  twitter: string | null;
  twitterVerified: boolean;
  /** @nullable */
  instagram: string | null;
  instagramVerified: boolean;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  lastUsernameChange: string | null;
  /** @nullable */
  bio: string | null;
  /** @nullable */
  linksJSON: string | null;
  /** @nullable */
  pangeaAccount: string | null;
};

export type UserPublicProfileParams = {
userId: string;
};

export type UserPublicProfile200Profile = {
  /** @nullable */
  username: string | null;
  /** @nullable */
  bio: string | null;
  /** @nullable */
  linksJSON: string | null;
};

export type UserPublicProfile200 = {
  profile: UserPublicProfile200Profile;
  imagesCreated: number;
  imagesFavorited: number;
};

export type UserGetUsernameParams = {
userId: string;
};

export type UserSetUsernameBody = {
  /**
   * @minLength 3
   * @maxLength 15
   * @pattern ^[a-zA-Z0-9_]+$
   */
  username: string;
};

export type UserSetUsername200 = {
  userId: string;
  /** @nullable */
  username: string | null;
  /** @nullable */
  email: string | null;
  emailVerified: boolean;
  /** @nullable */
  phone: string | null;
  phoneVerified: boolean;
  /** @nullable */
  twitter: string | null;
  twitterVerified: boolean;
  /** @nullable */
  instagram: string | null;
  instagramVerified: boolean;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  lastUsernameChange: string | null;
  /** @nullable */
  bio: string | null;
  /** @nullable */
  linksJSON: string | null;
  /** @nullable */
  pangeaAccount: string | null;
};

export type UserSetBioBody = {
  bio: string;
};

export type UserSetBio200 = {
  userId: string;
  /** @nullable */
  username: string | null;
  /** @nullable */
  email: string | null;
  emailVerified: boolean;
  /** @nullable */
  phone: string | null;
  phoneVerified: boolean;
  /** @nullable */
  twitter: string | null;
  twitterVerified: boolean;
  /** @nullable */
  instagram: string | null;
  instagramVerified: boolean;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  lastUsernameChange: string | null;
  /** @nullable */
  bio: string | null;
  /** @nullable */
  linksJSON: string | null;
  /** @nullable */
  pangeaAccount: string | null;
};

export type UserSendVerificationEmailBody = {
  email: string;
};

export type UserPointsHistoryParams = {
userId?: string;
startDateTime?: string;
limit?: number;
offset?: number;
order?: UserPointsHistoryOrder;
endDateTime?: string;
};

export type UserPointsHistoryOrder = typeof UserPointsHistoryOrder[keyof typeof UserPointsHistoryOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserPointsHistoryOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type UserPointsHistory200ItemType = typeof UserPointsHistory200ItemType[keyof typeof UserPointsHistory200ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserPointsHistory200ItemType = {
  purchase: 'purchase',
  refund: 'refund',
  comission: 'comission',
  bonus: 'bonus',
  referral: 'referral',
  commission: 'commission',
  promoCode: 'promoCode',
  createModel: 'createModel',
  cryptoDeposit: 'cryptoDeposit',
  createTrainingSet: 'createTrainingSet',
} as const;

export type UserPointsHistory200Item = {
  type: UserPointsHistory200ItemType;
  id: string;
  createdAt: string;
  /** @nullable */
  memo: string | null;
  quantity: number;
  userFinalBalance: number;
};

export type UserFindByUsernameParams = {
username: string;
};

export type UserFindByEmailParams = {
email: string;
};

export type UserFindByPhoneParams = {
phone: string;
};

export type UserFindByPrivyIdParams = {
privyId: string;
};

export type UserGetNotificationConfig200EmailFrequency = typeof UserGetNotificationConfig200EmailFrequency[keyof typeof UserGetNotificationConfig200EmailFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserGetNotificationConfig200EmailFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserGetNotificationConfig200PhoneFrequency = typeof UserGetNotificationConfig200PhoneFrequency[keyof typeof UserGetNotificationConfig200PhoneFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserGetNotificationConfig200PhoneFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserGetNotificationConfig200 = {
  emailFrequency: UserGetNotificationConfig200EmailFrequency;
  phoneFrequency: UserGetNotificationConfig200PhoneFrequency;
  userId: string;
  email: boolean;
  phone: boolean;
};

export type UserSetNotificationConfigBodyEmailFrequency = typeof UserSetNotificationConfigBodyEmailFrequency[keyof typeof UserSetNotificationConfigBodyEmailFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSetNotificationConfigBodyEmailFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserSetNotificationConfigBodyPhoneFrequency = typeof UserSetNotificationConfigBodyPhoneFrequency[keyof typeof UserSetNotificationConfigBodyPhoneFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSetNotificationConfigBodyPhoneFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserSetNotificationConfigBody = {
  email?: boolean;
  phone?: boolean;
  emailFrequency?: UserSetNotificationConfigBodyEmailFrequency;
  phoneFrequency?: UserSetNotificationConfigBodyPhoneFrequency;
};

export type UserSetNotificationConfig200EmailFrequency = typeof UserSetNotificationConfig200EmailFrequency[keyof typeof UserSetNotificationConfig200EmailFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSetNotificationConfig200EmailFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserSetNotificationConfig200PhoneFrequency = typeof UserSetNotificationConfig200PhoneFrequency[keyof typeof UserSetNotificationConfig200PhoneFrequency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSetNotificationConfig200PhoneFrequency = {
  instant: 'instant',
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
} as const;

export type UserSetNotificationConfig200 = {
  emailFrequency: UserSetNotificationConfig200EmailFrequency;
  phoneFrequency: UserSetNotificationConfig200PhoneFrequency;
  userId: string;
  email: boolean;
  phone: boolean;
};

export type UserUnsubscribeEmailNotificationsBody = { [key: string]: unknown };

export type UserSetAvatarBodyPosition = {
  x: number;
  y: number;
};

export type UserSetAvatarBody = {
  imageId: string;
  scale: number;
  position: UserSetAvatarBodyPosition;
};

/**
 * @nullable
 */
export type UserAllUsers200ItemProfile = {
  /** @nullable */
  bio: string | null;
  /** @nullable */
  username: string | null;
} | null;

export type UserAllUsers200Item = {
  id: string;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  Profile: UserAllUsers200ItemProfile;
};

export type LoginLinkInitLoginLinkBody = {
  email?: string;
  phoneNumber?: string;
  referredBy?: string;
};

export type LoginLinkLoginWithLinkBody = {
  linkId: string;
};

export type LoginLinkLoginWithLink200 = {
  token: string;
  userId: string;
};

export type StatsUsers200 = {
  spentPoints: number;
  spentOver100Points: number;
  spentOver1000Points: number;
  spentOver10000Points: number;
  spentOver20000Points: number;
  purchasedImage: number;
  createdImage: number;
  emailVerified: number;
  phoneVerified: number;
  instagramVerified: number;
  twitterVerified: number;
  setUsername: number;
};

export type _StatsImages200AverageImageQuantityPerCreateRequestAvg = {
  /** @nullable */
  quantity: number | null;
};

export type StatsImages200AverageImageQuantityPerCreateRequest = {
  _avg: _StatsImages200AverageImageQuantityPerCreateRequestAvg;
};

export type StatsImages200 = {
  totalCreated: number;
  totalUpscaled: number;
  totalImageCreateRequests: number;
  averageImageQuantityPerCreateRequest: StatsImages200AverageImageQuantityPerCreateRequest;
  purchasedImages: number;
  totalPurchases: number;
  privateImages: number;
  imagesInAtLeastOneCollection: number;
  imageCreationFailed: number;
};

export type StatsCollections200 = {
  collectionsCreated: number;
  emptyCollections: number;
};

export type _StatsPayments200PaypalOrdersTotalPaidSum = {
  /** @nullable */
  amount: number | null;
};

export type StatsPayments200PaypalOrdersTotalPaid = {
  _sum: _StatsPayments200PaypalOrdersTotalPaidSum;
};

export type StatsPayments200 = {
  incompletePayPayPalOrders: number;
  completePayPayPalOrders: number;
  paypalOrdersTotalPaid: StatsPayments200PaypalOrdersTotalPaid;
};

export type CollectionsMediaInUsersCollectionParams = {
imageId?: string;
videoId?: string;
name: string;
};

export type CollectionsLikeMediaBody = {
  imageId?: string;
  videoId?: string;
};

export type CollectionsUnlikeMediaBody = {
  imageId?: string;
  videoId?: string;
};

export type CollectionsGetCollectionMetaParams = {
id: string;
};

export type _CollectionsGetCollectionMeta200Count = {
  Images: number;
  Favorited: number;
};

export type CollectionsGetCollectionMeta200 = {
  id: string;
  name: string;
  description: string;
  ownerId: string;
  private: boolean;
  _count: _CollectionsGetCollectionMeta200Count;
};

export type CollectionsFindCollectionByNameParams = {
ownerId: string;
collectionName: string;
};

export type CollectionsFindCollectionByName200 = {
  id: string;
};

export type CollectionsGetCollectionImagesParams = {
id: string;
};

export type CollectionsGetCollectionImages200ItemImageRequest = {
  userId: string;
};

export type CollectionsGetCollectionImages200Item = {
  id: string;
  createdAt: string;
  updatedAt: string;
  imageRequestId: string;
  seed: string;
  errored: boolean;
  filtered: boolean;
  deleted: boolean;
  imageRequest: CollectionsGetCollectionImages200ItemImageRequest;
};

export type CollectionsGetCollectionVideosParams = {
id: string;
};

export type CollectionsGetCollectionVideos200ItemStatus = typeof CollectionsGetCollectionVideos200ItemStatus[keyof typeof CollectionsGetCollectionVideos200ItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectionsGetCollectionVideos200ItemStatus = {
  processing: 'processing',
  previewRendering: 'previewRendering',
  ready: 'ready',
  errored: 'errored',
} as const;

export type CollectionsGetCollectionVideos200ItemVideoRequest = {
  userId: string;
};

export type CollectionsGetCollectionVideos200Item = {
  status: CollectionsGetCollectionVideos200ItemStatus;
  id: string;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  seed: string | null;
  errored: boolean;
  deleted: boolean;
  videoRequestId: string;
  /** @nullable */
  replicatePredictionId: string | null;
  /** @nullable */
  coconutJobId: string | null;
  /** @nullable */
  errorMessage: string | null;
  VideoRequest: CollectionsGetCollectionVideos200ItemVideoRequest;
};

export type PromoCreatePromoCodeBody = {
  points: number;
};

export type PromoCreatePromoCode200 = {
  id: string;
  points: number;
  /** @nullable */
  claimedByUserId: string | null;
  /** @nullable */
  claimedAt: string | null;
  createdAt: string;
};

export type PromoDeletePromoCodeBody = {
  id: string;
};

export type PromoGetPromoCodes200Item = {
  id: string;
  points: number;
  /** @nullable */
  claimedByUserId: string | null;
  /** @nullable */
  claimedAt: string | null;
  createdAt: string;
};

export type PromoGetPromoCodeDetailsParams = {
id: string;
};

export type PromoGetPromoCodeDetails200 = {
  id: string;
  points: number;
  /** @nullable */
  claimedByUserId: string | null;
  /** @nullable */
  claimedAt: string | null;
  createdAt: string;
};

export type PromoClaimPromoCodeBody = {
  id: string;
};

export type PromoCreateAccountWithPromoBody = {
  id: string;
  referrerUsername?: string;
  email?: string;
};

export type PromoCreateAccountWithPromo200 = {
  token: string;
  userId: string;
};

export type ModelsEditModelBody = {
  id: string;
  /** @maxLength 30 */
  name: string;
  /** @maxLength 500 */
  description: string;
};

export type ModelsGetUserModelsParams = {
trainingSetId?: string;
};

export type ModelsGetUserModels200ItemStatus = typeof ModelsGetUserModels200ItemStatus[keyof typeof ModelsGetUserModels200ItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetUserModels200ItemStatus = {
  training: 'training',
  trained: 'trained',
  error: 'error',
  waitingForImageUpload: 'waitingForImageUpload',
} as const;

export type ModelsGetUserModels200ItemModelType = typeof ModelsGetUserModels200ItemModelType[keyof typeof ModelsGetUserModels200ItemModelType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetUserModels200ItemModelType = {
  faceClone: 'faceClone',
  faceForge: 'faceForge',
  fluxDev: 'fluxDev',
  fluxPro: 'fluxPro',
  fluxProUltra: 'fluxProUltra',
} as const;

/**
 * @nullable
 */
export type ModelsGetUserModels200ItemFineTuneType = typeof ModelsGetUserModels200ItemFineTuneType[keyof typeof ModelsGetUserModels200ItemFineTuneType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetUserModels200ItemFineTuneType = {
  lora: 'lora',
  full: 'full',
} as const;

export type ModelsGetUserModels200ItemMode = typeof ModelsGetUserModels200ItemMode[keyof typeof ModelsGetUserModels200ItemMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetUserModels200ItemMode = {
  subject: 'subject',
  style: 'style',
  object: 'object',
  general: 'general',
} as const;

export type ModelsGetUserModels200ItemModelTagsItem = typeof ModelsGetUserModels200ItemModelTagsItem[keyof typeof ModelsGetUserModels200ItemModelTagsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetUserModels200ItemModelTagsItem = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetUserModels200ItemImageRequestsItemImagesItem = {
  id: string;
};

export type ModelsGetUserModels200ItemImageRequestsItem = {
  id: string;
  images: ModelsGetUserModels200ItemImageRequestsItemImagesItem[];
};

export type ModelsGetUserModels200Item = {
  status: ModelsGetUserModels200ItemStatus;
  modelType: ModelsGetUserModels200ItemModelType;
  /** @nullable */
  fineTuneType: ModelsGetUserModels200ItemFineTuneType;
  mode: ModelsGetUserModels200ItemMode;
  modelTags: ModelsGetUserModels200ItemModelTagsItem[];
  id: string;
  createdAt: string;
  updatedAt: string;
  creatorId: string;
  name: string;
  slug: string;
  /** @nullable */
  trainingError: string | null;
  /** @nullable */
  trainingId: string | null;
  /** @nullable */
  inferenceId: string | null;
  Public: boolean;
  /** @nullable */
  trainingSetId: string | null;
  /** @nullable */
  description: string | null;
  featured: boolean;
  imageRequests: ModelsGetUserModels200ItemImageRequestsItem[];
};

export type ModelsCreateModelBodyBaseModel = typeof ModelsCreateModelBodyBaseModel[keyof typeof ModelsCreateModelBodyBaseModel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsCreateModelBodyBaseModel = {
  faceClone: 'faceClone',
  faceForge: 'faceForge',
  fluxDev: 'fluxDev',
  fluxPro: 'fluxPro',
  fluxProUltra: 'fluxProUltra',
} as const;

export type ModelsCreateModelBodyModelMode = typeof ModelsCreateModelBodyModelMode[keyof typeof ModelsCreateModelBodyModelMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsCreateModelBodyModelMode = {
  subject: 'subject',
  style: 'style',
  object: 'object',
  general: 'general',
} as const;

export type ModelsCreateModelBodyFineTuneType = typeof ModelsCreateModelBodyFineTuneType[keyof typeof ModelsCreateModelBodyFineTuneType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsCreateModelBodyFineTuneType = {
  lora: 'lora',
  full: 'full',
} as const;

export type ModelsCreateModelBody = {
  name: string;
  description: string;
  baseModel: ModelsCreateModelBodyBaseModel;
  modelMode: ModelsCreateModelBodyModelMode;
  fineTuneType: ModelsCreateModelBodyFineTuneType;
  trainingSetId: string;
};

export type ModelsGetTrainingStatusParams = {
id: string;
};

export type ModelsGetTrainingStatus200Status = typeof ModelsGetTrainingStatus200Status[keyof typeof ModelsGetTrainingStatus200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetTrainingStatus200Status = {
  processing: 'processing',
  trained: 'trained',
  succeeded: 'succeeded',
  failed: 'failed',
  starting: 'starting',
} as const;

export type ModelsGetTrainingStatus200 = {
  status: ModelsGetTrainingStatus200Status;
  /** @nullable */
  error: string | null;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
  elapsedTime: string;
  remainingTime: string;
};

export type ModelsDeleteModelBody = {
  id: string;
};

export type ModelsGetCustomModelParams = {
id: string;
};

export type ModelsGetCustomModel200Status = typeof ModelsGetCustomModel200Status[keyof typeof ModelsGetCustomModel200Status];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetCustomModel200Status = {
  training: 'training',
  trained: 'trained',
  error: 'error',
  waitingForImageUpload: 'waitingForImageUpload',
} as const;

export type ModelsGetCustomModel200ModelType = typeof ModelsGetCustomModel200ModelType[keyof typeof ModelsGetCustomModel200ModelType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetCustomModel200ModelType = {
  faceClone: 'faceClone',
  faceForge: 'faceForge',
  fluxDev: 'fluxDev',
  fluxPro: 'fluxPro',
  fluxProUltra: 'fluxProUltra',
} as const;

/**
 * @nullable
 */
export type ModelsGetCustomModel200FineTuneType = typeof ModelsGetCustomModel200FineTuneType[keyof typeof ModelsGetCustomModel200FineTuneType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetCustomModel200FineTuneType = {
  lora: 'lora',
  full: 'full',
} as const;

export type ModelsGetCustomModel200Mode = typeof ModelsGetCustomModel200Mode[keyof typeof ModelsGetCustomModel200Mode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetCustomModel200Mode = {
  subject: 'subject',
  style: 'style',
  object: 'object',
  general: 'general',
} as const;

export type ModelsGetCustomModel200ModelTagsItem = typeof ModelsGetCustomModel200ModelTagsItem[keyof typeof ModelsGetCustomModel200ModelTagsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetCustomModel200ModelTagsItem = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetCustomModel200 = {
  status: ModelsGetCustomModel200Status;
  modelType: ModelsGetCustomModel200ModelType;
  /** @nullable */
  fineTuneType: ModelsGetCustomModel200FineTuneType;
  mode: ModelsGetCustomModel200Mode;
  modelTags: ModelsGetCustomModel200ModelTagsItem[];
  id: string;
  createdAt: string;
  updatedAt: string;
  creatorId: string;
  name: string;
  slug: string;
  /** @nullable */
  trainingError: string | null;
  /** @nullable */
  trainingId: string | null;
  /** @nullable */
  inferenceId: string | null;
  Public: boolean;
  /** @nullable */
  trainingSetId: string | null;
  /** @nullable */
  description: string | null;
  featured: boolean;
};

export type ModelsGetPublicModelsParams = {
page?: number;
tag?: ModelsGetPublicModelsTag;
creatorId?: string;
};

export type ModelsGetPublicModelsTag = typeof ModelsGetPublicModelsTag[keyof typeof ModelsGetPublicModelsTag];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModelsTag = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetPublicModels200ItemStatus = typeof ModelsGetPublicModels200ItemStatus[keyof typeof ModelsGetPublicModels200ItemStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModels200ItemStatus = {
  training: 'training',
  trained: 'trained',
  error: 'error',
  waitingForImageUpload: 'waitingForImageUpload',
} as const;

export type ModelsGetPublicModels200ItemModelType = typeof ModelsGetPublicModels200ItemModelType[keyof typeof ModelsGetPublicModels200ItemModelType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModels200ItemModelType = {
  faceClone: 'faceClone',
  faceForge: 'faceForge',
  fluxDev: 'fluxDev',
  fluxPro: 'fluxPro',
  fluxProUltra: 'fluxProUltra',
} as const;

/**
 * @nullable
 */
export type ModelsGetPublicModels200ItemFineTuneType = typeof ModelsGetPublicModels200ItemFineTuneType[keyof typeof ModelsGetPublicModels200ItemFineTuneType] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModels200ItemFineTuneType = {
  lora: 'lora',
  full: 'full',
} as const;

export type ModelsGetPublicModels200ItemMode = typeof ModelsGetPublicModels200ItemMode[keyof typeof ModelsGetPublicModels200ItemMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModels200ItemMode = {
  subject: 'subject',
  style: 'style',
  object: 'object',
  general: 'general',
} as const;

export type ModelsGetPublicModels200ItemModelTagsItem = typeof ModelsGetPublicModels200ItemModelTagsItem[keyof typeof ModelsGetPublicModels200ItemModelTagsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetPublicModels200ItemModelTagsItem = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetPublicModels200Item = {
  status: ModelsGetPublicModels200ItemStatus;
  modelType: ModelsGetPublicModels200ItemModelType;
  /** @nullable */
  fineTuneType: ModelsGetPublicModels200ItemFineTuneType;
  mode: ModelsGetPublicModels200ItemMode;
  modelTags: ModelsGetPublicModels200ItemModelTagsItem[];
  id: string;
  createdAt: string;
  updatedAt: string;
  creatorId: string;
  name: string;
  slug: string;
  /** @nullable */
  trainingError: string | null;
  /** @nullable */
  trainingId: string | null;
  /** @nullable */
  inferenceId: string | null;
  Public: boolean;
  /** @nullable */
  trainingSetId: string | null;
  /** @nullable */
  description: string | null;
  featured: boolean;
  previewMediaId?: string;
};

export type ModelsGetBaseModelsParams = {
page?: number;
};

export type ModelsGetBaseModels200ItemModelTagsItem = typeof ModelsGetBaseModels200ItemModelTagsItem[keyof typeof ModelsGetBaseModels200ItemModelTagsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetBaseModels200ItemModelTagsItem = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetBaseModels200Item = {
  modelTags: ModelsGetBaseModels200ItemModelTagsItem[];
  slug: string;
  updatedAt: string;
  name: string;
  /** @nullable */
  description: string | null;
  featured: boolean;
  /** @nullable */
  blogLink: string | null;
  /** @nullable */
  longDescription: string | null;
  previewMediaId?: string;
};

export type ModelsGetModelByNameParams = {
name: string;
customModelId?: string;
includeMedia?: number;
};

export type ModelsGetModelByName200CustomModelCreator = {
  id: string;
  userName: string;
};

export type ModelsGetModelByName200ModelModelTagsItem = typeof ModelsGetModelByName200ModelModelTagsItem[keyof typeof ModelsGetModelByName200ModelModelTagsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelsGetModelByName200ModelModelTagsItem = {
  Realistic: 'Realistic',
  Creative: 'Creative',
  Illustrative: 'Illustrative',
  DesignText: 'DesignText',
  Precision: 'Precision',
  Vibrant: 'Vibrant',
  Versatile: 'Versatile',
  FastBudget: 'FastBudget',
  Vector: 'Vector',
  Multimodal: 'Multimodal',
  Bilingual: 'Bilingual',
  Custom: 'Custom',
  Cinematic: 'Cinematic',
  MultiCamera: 'MultiCamera',
  Audio: 'Audio',
  Dramatic: 'Dramatic',
  Experimental: 'Experimental',
  Image: 'Image',
  Video: 'Video',
} as const;

export type ModelsGetModelByName200Model = {
  modelTags: ModelsGetModelByName200ModelModelTagsItem[];
  slug: string;
  updatedAt: string;
  name: string;
  /** @nullable */
  description: string | null;
  featured: boolean;
  /** @nullable */
  blogLink: string | null;
  /** @nullable */
  longDescription: string | null;
};

export type ModelsGetModelByName200MediaItem = {
  id: string;
  meta: string;
  creatorUsername?: string;
};

export type ModelsGetModelByName200 = {
  customModelCreator?: ModelsGetModelByName200CustomModelCreator;
  model: ModelsGetModelByName200Model;
  media?: ModelsGetModelByName200MediaItem[];
};

export type ModelsSetModelPrivacyBody = {
  id: string;
  public: boolean;
};

export type AdminLoginAsUserBody = {
  id: string;
};

export type TonomyAuthLoginOrRegisterBody = {
  jwtString: string;
  referrerUsername?: string;
};

export type TonomyAuthLoginOrRegister200 = {
  token: string;
  userId: string;
};

export type PrivyAuthenticateBody = {
  accessToken: string;
  referrerUsername?: string;
};

export type PrivyAuthenticate200 = {
  token: string;
  userId: string;
};

export type PrivyLinkCurrentUserBody = {
  accessToken: string;
};

export type PrivyLinkCurrentUser200 = {
  token: string;
  userId: string;
};

export type PromptTemplatesListParams = {
tag?: string;
kind?: PromptTemplatesListKind;
page?: number;
pageSize?: number;
};

export type PromptTemplatesListKind = typeof PromptTemplatesListKind[keyof typeof PromptTemplatesListKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PromptTemplatesListKind = {
  subject: 'subject',
  setting: 'setting',
  style: 'style',
  mood: 'mood',
} as const;

export type PromptTemplatesList200ItemKind = typeof PromptTemplatesList200ItemKind[keyof typeof PromptTemplatesList200ItemKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PromptTemplatesList200ItemKind = {
  subject: 'subject',
  setting: 'setting',
  style: 'style',
  mood: 'mood',
} as const;

export type PromptTemplatesList200ItemSlots = {[key: string]: string | string[]};

export type PromptTemplatesList200Item = {
  id: string;
  name: string;
  kind: PromptTemplatesList200ItemKind;
  tags: string[];
  /** @nullable */
  previewUrl: string | null;
  /** @nullable */
  previewUrlMale: string | null;
  /** @nullable */
  previewUrlFemale: string | null;
  slots: PromptTemplatesList200ItemSlots;
};

export type TrainingSetsCreateSetBody = {
  /** @maxLength 100 */
  name: string;
  /** @maxLength 1400 */
  description: string;
  /**
   * @minimum 1
   * @maximum 200
   */
  numImages: number;
  /** @maximum 800 */
  zipSizeMb: number;
};

export type TrainingSetsCreateSet200SignedZipUploadDataFields = {[key: string]: string};

export type TrainingSetsCreateSet200SignedZipUploadData = {
  url: string;
  fields: TrainingSetsCreateSet200SignedZipUploadDataFields;
};

export type TrainingSetsCreateSet200SignedThumbnailUploadDatasItemFields = {[key: string]: string};

export type TrainingSetsCreateSet200SignedThumbnailUploadDatasItem = {
  url: string;
  fields: TrainingSetsCreateSet200SignedThumbnailUploadDatasItemFields;
};

export type TrainingSetsCreateSet200 = {
  trainingSetId: string;
  signedZipUploadData: TrainingSetsCreateSet200SignedZipUploadData;
  signedThumbnailUploadDatas: TrainingSetsCreateSet200SignedThumbnailUploadDatasItem[];
};

export type TrainingSetsFinalizeSetBody = {
  trainingSetId: string;
};

export type TrainingSetsGetUserSetsParams = {
userId: string;
};

/**
 * @nullable
 */
export type TrainingSetsGetUserSets200ItemSubjectGender = typeof TrainingSetsGetUserSets200ItemSubjectGender[keyof typeof TrainingSetsGetUserSets200ItemSubjectGender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsGetUserSets200ItemSubjectGender = {
  male: 'male',
  female: 'female',
  unknown: 'unknown',
} as const;

/**
 * @nullable
 */
export type TrainingSetsGetUserSets200ItemSubjectCategory = typeof TrainingSetsGetUserSets200ItemSubjectCategory[keyof typeof TrainingSetsGetUserSets200ItemSubjectCategory] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsGetUserSets200ItemSubjectCategory = {
  human: 'human',
  animal: 'animal',
  object: 'object',
  architecture: 'architecture',
  setting: 'setting',
  style: 'style',
  dog: 'dog',
  cat: 'cat',
  other: 'other',
} as const;

export type TrainingSetsGetUserSets200Item = {
  /** @nullable */
  subjectGender: TrainingSetsGetUserSets200ItemSubjectGender;
  /** @nullable */
  subjectCategory: TrainingSetsGetUserSets200ItemSubjectCategory;
  id: string;
  ownerId: string;
  createdAt: string;
  name: string;
  sizeMB: number;
  numImages: number;
  status: number;
  thumbnailIds: string[];
  /** @nullable */
  description: string | null;
  deleted: boolean;
  updatedAt: string;
  /** @nullable */
  subjectDescription: string | null;
};

export type TrainingSetsGetSetParams = {
trainingSetId: string;
};

/**
 * @nullable
 */
export type TrainingSetsGetSet200SubjectGender = typeof TrainingSetsGetSet200SubjectGender[keyof typeof TrainingSetsGetSet200SubjectGender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsGetSet200SubjectGender = {
  male: 'male',
  female: 'female',
  unknown: 'unknown',
} as const;

/**
 * @nullable
 */
export type TrainingSetsGetSet200SubjectCategory = typeof TrainingSetsGetSet200SubjectCategory[keyof typeof TrainingSetsGetSet200SubjectCategory] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsGetSet200SubjectCategory = {
  human: 'human',
  animal: 'animal',
  object: 'object',
  architecture: 'architecture',
  setting: 'setting',
  style: 'style',
  dog: 'dog',
  cat: 'cat',
  other: 'other',
} as const;

export type TrainingSetsGetSet200 = {
  /** @nullable */
  subjectGender: TrainingSetsGetSet200SubjectGender;
  /** @nullable */
  subjectCategory: TrainingSetsGetSet200SubjectCategory;
  id: string;
  ownerId: string;
  createdAt: string;
  name: string;
  sizeMB: number;
  numImages: number;
  status: number;
  thumbnailIds: string[];
  /** @nullable */
  description: string | null;
  deleted: boolean;
  updatedAt: string;
  /** @nullable */
  subjectDescription: string | null;
};

export type TrainingSetsDeleteSetBody = {
  trainingSetId: string;
};

export type TrainingSetsEditSetBody = {
  trainingSetId: string;
  /** @maxLength 32 */
  newName: string;
  /** @maxLength 400 */
  newDescription: string;
};

export type TrainingSetsDescribeSetParams = {
trainingSetId: string;
};

/**
 * @nullable
 */
export type TrainingSetsDescribeSet200SubjectGender = typeof TrainingSetsDescribeSet200SubjectGender[keyof typeof TrainingSetsDescribeSet200SubjectGender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsDescribeSet200SubjectGender = {
  male: 'male',
  female: 'female',
  unknown: 'unknown',
} as const;

/**
 * @nullable
 */
export type TrainingSetsDescribeSet200SubjectCategory = typeof TrainingSetsDescribeSet200SubjectCategory[keyof typeof TrainingSetsDescribeSet200SubjectCategory] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainingSetsDescribeSet200SubjectCategory = {
  human: 'human',
  animal: 'animal',
  object: 'object',
  architecture: 'architecture',
  setting: 'setting',
  style: 'style',
  dog: 'dog',
  cat: 'cat',
  other: 'other',
} as const;

export type TrainingSetsDescribeSet200 = {
  /** @nullable */
  subjectGender: TrainingSetsDescribeSet200SubjectGender;
  /** @nullable */
  subjectCategory: TrainingSetsDescribeSet200SubjectCategory;
  id: string;
  ownerId: string;
  createdAt: string;
  name: string;
  sizeMB: number;
  numImages: number;
  status: number;
  thumbnailIds: string[];
  /** @nullable */
  description: string | null;
  deleted: boolean;
  updatedAt: string;
  /** @nullable */
  subjectDescription: string | null;
};

export type UpvotesGetWallet200 = {
  allowance: number;
  usedToday: number;
  remainingToday: number;
  resetAt: string;
};

export type UpvotesUpvoteBody = {
  imageId?: string;
  videoId?: string;
};

export type UpvotesUpvote200 = {
  allowance: number;
  remainingToday: number;
};

export type UpvotesGetMediaUpvoteCountParams = {
imageId?: string;
videoId?: string;
since?: string;
};

export type UpvotesGetMediaUpvoteCount200 = {
  total: number;
};

export type UpvotesDownvoteBody = {
  imageId?: string;
  videoId?: string;
};

export type UpvotesDownvote200 = {
  hidden: boolean;
};

export type UpvotesUnhideBody = {
  imageId?: string;
  videoId?: string;
};

export type UpvotesUnhide200 = {
  hidden: boolean;
};

export type UpvotesGetHiddenListParams = {
limit?: number;
offset?: number;
};

export type UpvotesGetHiddenList200 = {
  images: string[];
  videos: string[];
};

export type PopularityBatchBodyItemsItemMediaType = typeof PopularityBatchBodyItemsItemMediaType[keyof typeof PopularityBatchBodyItemsItemMediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PopularityBatchBodyItemsItemMediaType = {
  image: 'image',
  video: 'video',
} as const;

export type PopularityBatchBodyItemsItem = {
  id: string;
  mediaType: PopularityBatchBodyItemsItemMediaType;
};

export type PopularityBatchBody = {
  /**
   * @minItems 1
   * @maxItems 100
   */
  items: PopularityBatchBodyItemsItem[];
  /**
   * @minimum 1
   * @maximum 365
   */
  upvotesSinceDays?: number;
};

export type PopularityBatch200Item = {
  id: string;
  favorites: number;
  upvotes: number;
  downvotes: number;
  isFavoritedByMe?: boolean;
  isUpvotedByMe?: boolean;
  hidden?: boolean;
};

export type EventsPublicEventsParams = {
since?: string;
limit?: number;
types?: EventsPublicEventsTypesItem[];
};

export type EventsPublicEventsTypesItem = typeof EventsPublicEventsTypesItem[keyof typeof EventsPublicEventsTypesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventsPublicEventsTypesItem = {
  likedImage: 'likedImage',
  likedVideo: 'likedVideo',
  unlikedVideo: 'unlikedVideo',
  addedImageToCollection: 'addedImageToCollection',
  unlockedImage: 'unlockedImage',
  unlockedVideo: 'unlockedVideo',
  unlikedImage: 'unlikedImage',
  removedImageFromCollection: 'removedImageFromCollection',
  referredUser: 'referredUser',
  missionCompleted: 'missionCompleted',
} as const;

export type EventsPublicEvents200ItemType = typeof EventsPublicEvents200ItemType[keyof typeof EventsPublicEvents200ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventsPublicEvents200ItemType = {
  likedImage: 'likedImage',
  likedVideo: 'likedVideo',
  unlikedVideo: 'unlikedVideo',
  addedImageToCollection: 'addedImageToCollection',
  unlockedImage: 'unlockedImage',
  unlockedVideo: 'unlockedVideo',
  unlikedImage: 'unlikedImage',
  removedImageFromCollection: 'removedImageFromCollection',
  referredUser: 'referredUser',
  missionCompleted: 'missionCompleted',
} as const;

export type EventsPublicEvents200Item = {
  type: EventsPublicEvents200ItemType;
  id: string;
  createdAt: string;
  dataJSON: string;
  originUserId: string;
  /** @nullable */
  originUsername: string | null;
  seen?: boolean;
};

export type EventsPrivateEventsParams = {
since?: string;
limit?: number;
includeSeen?: boolean;
types?: EventsPrivateEventsTypesItem[];
};

export type EventsPrivateEventsTypesItem = typeof EventsPrivateEventsTypesItem[keyof typeof EventsPrivateEventsTypesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventsPrivateEventsTypesItem = {
  likedImage: 'likedImage',
  likedVideo: 'likedVideo',
  unlikedVideo: 'unlikedVideo',
  addedImageToCollection: 'addedImageToCollection',
  unlockedImage: 'unlockedImage',
  unlockedVideo: 'unlockedVideo',
  unlikedImage: 'unlikedImage',
  removedImageFromCollection: 'removedImageFromCollection',
  referredUser: 'referredUser',
  missionCompleted: 'missionCompleted',
} as const;

export type EventsPrivateEvents200ItemType = typeof EventsPrivateEvents200ItemType[keyof typeof EventsPrivateEvents200ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventsPrivateEvents200ItemType = {
  likedImage: 'likedImage',
  likedVideo: 'likedVideo',
  unlikedVideo: 'unlikedVideo',
  addedImageToCollection: 'addedImageToCollection',
  unlockedImage: 'unlockedImage',
  unlockedVideo: 'unlockedVideo',
  unlikedImage: 'unlikedImage',
  removedImageFromCollection: 'removedImageFromCollection',
  referredUser: 'referredUser',
  missionCompleted: 'missionCompleted',
} as const;

export type EventsPrivateEvents200Item = {
  type: EventsPrivateEvents200ItemType;
  id: string;
  createdAt: string;
  dataJSON: string;
  originUserId: string;
  /** @nullable */
  originUsername: string | null;
  seen?: boolean;
};

export type EventsMarkEventSeenBody = {
  eventId: string;
};

export type MissionsList200ItemRewardsItemOneOfType = typeof MissionsList200ItemRewardsItemOneOfType[keyof typeof MissionsList200ItemRewardsItemOneOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionsList200ItemRewardsItemOneOfType = {
  points: 'points',
} as const;

export type MissionsList200ItemRewardsItemOneOf = {
  type: MissionsList200ItemRewardsItemOneOfType;
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  amount: number;
  memo?: string;
};

export type MissionsList200ItemRewardsItemOneOfThreeType = typeof MissionsList200ItemRewardsItemOneOfThreeType[keyof typeof MissionsList200ItemRewardsItemOneOfThreeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionsList200ItemRewardsItemOneOfThreeType = {
  badge: 'badge',
} as const;

export type MissionsList200ItemRewardsItemOneOfThree = {
  type: MissionsList200ItemRewardsItemOneOfThreeType;
  badgeId: string;
};

export type MissionsList200ItemRewardsItem = MissionsList200ItemRewardsItemOneOf | MissionsList200ItemRewardsItemOneOfThree;

export type MissionsList200Item = {
  id: string;
  description: string;
  rewards: MissionsList200ItemRewardsItem[];
};

export type MissionsProgressParams = {
missionId: string;
userId?: string;
};

export type MissionsProgress200 = {
  missionId: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
};

export type MissionsIsClaimedParams = {
missionId: string;
userId?: string;
};

export type MissionsIsClaimed200 = {
  missionId: string;
  claimed: boolean;
  claimKey: string;
  claimedAt?: string;
};

export type MissionsClaimBody = {
  missionId: string;
  userId?: string;
};

export type MissionsClaim200RewardsAwardedItemOneOfType = typeof MissionsClaim200RewardsAwardedItemOneOfType[keyof typeof MissionsClaim200RewardsAwardedItemOneOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionsClaim200RewardsAwardedItemOneOfType = {
  points: 'points',
} as const;

export type MissionsClaim200RewardsAwardedItemOneOf = {
  type: MissionsClaim200RewardsAwardedItemOneOfType;
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  amount: number;
  memo?: string;
};

export type MissionsClaim200RewardsAwardedItemOneOfThreeType = typeof MissionsClaim200RewardsAwardedItemOneOfThreeType[keyof typeof MissionsClaim200RewardsAwardedItemOneOfThreeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionsClaim200RewardsAwardedItemOneOfThreeType = {
  badge: 'badge',
} as const;

export type MissionsClaim200RewardsAwardedItemOneOfThree = {
  type: MissionsClaim200RewardsAwardedItemOneOfThreeType;
  badgeId: string;
};

export type MissionsClaim200RewardsAwardedItem = MissionsClaim200RewardsAwardedItemOneOf | MissionsClaim200RewardsAwardedItemOneOfThree;

export type MissionsClaim200 = {
  awarded: boolean;
  missionId: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
  rewardsAwarded?: MissionsClaim200RewardsAwardedItem[];
  reason?: string;
};

export type MissionsStatusParams = {
missionId: string;
userId?: string;
};

export type MissionsStatus200 = {
  missionId: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
  claimed: boolean;
  claimKey: string;
  claimedAt?: string;
};

export type MissionsStatusesParams = {
userId?: string;
};

export type MissionsStatuses200StatusesItem = {
  missionId: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
  claimed: boolean;
  claimKey: string;
  claimedAt?: string;
};

export type MissionsStatuses200 = {
  statuses: MissionsStatuses200StatusesItem[];
  completed: string[];
  claimed: string[];
};

export type BadgesList200Item = {
  id: string;
  imageUrl: string;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  description?: string | null;
  /** @minimum 0 */
  holders: number;
};

export type BadgesForUserParams = {
userId?: string;
};

export type BadgesForUser200ItemBadge = {
  id: string;
  imageUrl: string;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  description?: string | null;
};

export type BadgesForUser200Item = {
  id: string;
  createdAt: string;
  badge: BadgesForUser200ItemBadge;
};

export const getPkAuthRegisterStartUrl = () => {


  

  return `/pkAuth/registerStart`
}

export const pkAuthRegisterStart = async (pkAuthRegisterStartBody: PkAuthRegisterStartBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPkAuthRegisterStartUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pkAuthRegisterStartBody,)
  }
);}



export const getPkAuthRegisterFinishUrl = () => {


  

  return `/pkAuth/registerFinish`
}

export const pkAuthRegisterFinish = async (pkAuthRegisterFinishBody: PkAuthRegisterFinishBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPkAuthRegisterFinishUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pkAuthRegisterFinishBody,)
  }
);}



export const getPkAuthLoginStartUrl = () => {


  

  return `/pkAuth/loginStart`
}

export const pkAuthLoginStart = async (pkAuthLoginStartBody: PkAuthLoginStartBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPkAuthLoginStartUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pkAuthLoginStartBody,)
  }
);}



export const getPkAuthLoginFinishUrl = () => {


  

  return `/pkAuth/loginFinish`
}

export const pkAuthLoginFinish = async (pkAuthLoginFinishBody: PkAuthLoginFinishBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPkAuthLoginFinishUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pkAuthLoginFinishBody,)
  }
);}



export const getCreateImageUrl = () => {


  

  return `/create/image`
}

export const createImage = async (createImageBody: CreateImageBody, options?: RequestInit): Promise<CreateImage200> => {
  
  return fetcher<CreateImage200>(getCreateImageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createImageBody,)
  }
);}



export const getCreateVideoUrl = () => {


  

  return `/create/video`
}

export const createVideo = async (createVideoBody: CreateVideoBody, options?: RequestInit): Promise<CreateVideo200> => {
  
  return fetcher<CreateVideo200>(getCreateVideoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createVideoBody,)
  }
);}



export const getCreateRandomPromptUrl = () => {


  

  return `/create/randomPrompt`
}

export const createRandomPrompt = async (createRandomPromptBody: CreateRandomPromptBody, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreateRandomPromptUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createRandomPromptBody,)
  }
);}



export const getCreateImprovePromptUrl = () => {


  

  return `/create/improvePrompt`
}

export const createImprovePrompt = async (createImprovePromptBody: CreateImprovePromptBody, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreateImprovePromptUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createImprovePromptBody,)
  }
);}



export const getCreateUploadImageUrl = () => {


  

  return `/create/uploadImage`
}

export const createUploadImage = async (createUploadImageBody: CreateUploadImageBody, options?: RequestInit): Promise<CreateUploadImage200> => {
  
  return fetcher<CreateUploadImage200>(getCreateUploadImageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createUploadImageBody,)
  }
);}



export const getCreateQueueAsyncBatchUrl = () => {


  

  return `/create/queueAsyncBatch`
}

export const createQueueAsyncBatch = async (createQueueAsyncBatchBody: CreateQueueAsyncBatchBody, options?: RequestInit): Promise<CreateQueueAsyncBatch200> => {
  
  return fetcher<CreateQueueAsyncBatch200>(getCreateQueueAsyncBatchUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createQueueAsyncBatchBody,)
  }
);}



export const getCreationsGetCreationDataUrl = (params?: CreationsGetCreationDataParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/getCreationData?${stringifiedParams}` : `/creations/getCreationData`
}

export const creationsGetCreationData = async (params?: CreationsGetCreationDataParams, options?: RequestInit): Promise<CreationsGetCreationData200> => {
  
  return fetcher<CreationsGetCreationData200>(getCreationsGetCreationDataUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsUserImagePurchasesUrl = (params?: CreationsUserImagePurchasesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/userImagePurchases?${stringifiedParams}` : `/creations/userImagePurchases`
}

export const creationsUserImagePurchases = async (params?: CreationsUserImagePurchasesParams, options?: RequestInit): Promise<CreationsUserImagePurchases200Item[]> => {
  
  return fetcher<CreationsUserImagePurchases200Item[]>(getCreationsUserImagePurchasesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsUserVideoPurchasesUrl = (params?: CreationsUserVideoPurchasesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/userVideoPurchases?${stringifiedParams}` : `/creations/userVideoPurchases`
}

export const creationsUserVideoPurchases = async (params?: CreationsUserVideoPurchasesParams, options?: RequestInit): Promise<CreationsUserVideoPurchases200Item[]> => {
  
  return fetcher<CreationsUserVideoPurchases200Item[]>(getCreationsUserVideoPurchasesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsCreateImageRequestsUrl = (params?: CreationsCreateImageRequestsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/createImageRequests?${stringifiedParams}` : `/creations/createImageRequests`
}

export const creationsCreateImageRequests = async (params?: CreationsCreateImageRequestsParams, options?: RequestInit): Promise<CreationsCreateImageRequests200Item[]> => {
  
  return fetcher<CreationsCreateImageRequests200Item[]>(getCreationsCreateImageRequestsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsCreateVideoRequestsUrl = (params?: CreationsCreateVideoRequestsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/createVideoRequests?${stringifiedParams}` : `/creations/createVideoRequests`
}

export const creationsCreateVideoRequests = async (params?: CreationsCreateVideoRequestsParams, options?: RequestInit): Promise<CreationsCreateVideoRequests200Item[]> => {
  
  return fetcher<CreationsCreateVideoRequests200Item[]>(getCreationsCreateVideoRequestsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsGetImageRequestUrl = (params: CreationsGetImageRequestParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/getImageRequest?${stringifiedParams}` : `/creations/getImageRequest`
}

export const creationsGetImageRequest = async (params: CreationsGetImageRequestParams, options?: RequestInit): Promise<CreationsGetImageRequest200> => {
  
  return fetcher<CreationsGetImageRequest200>(getCreationsGetImageRequestUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsGetVideoRequestUrl = (params: CreationsGetVideoRequestParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/getVideoRequest?${stringifiedParams}` : `/creations/getVideoRequest`
}

export const creationsGetVideoRequest = async (params: CreationsGetVideoRequestParams, options?: RequestInit): Promise<CreationsGetVideoRequest200> => {
  
  return fetcher<CreationsGetVideoRequest200>(getCreationsGetVideoRequestUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsBrowseCreateRequestsUrl = (params: CreationsBrowseCreateRequestsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/browseCreateRequests?${stringifiedParams}` : `/creations/browseCreateRequests`
}

export const creationsBrowseCreateRequests = async (params: CreationsBrowseCreateRequestsParams, options?: RequestInit): Promise<unknown[]> => {
  
  return fetcher<unknown[]>(getCreationsBrowseCreateRequestsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsHdImageUrl = (params: CreationsHdImageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/hdImage?${stringifiedParams}` : `/creations/hdImage`
}

export const creationsHdImage = async (params: CreationsHdImageParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreationsHdImageUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsHdVideoUrl = (params: CreationsHdVideoParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/hdVideo?${stringifiedParams}` : `/creations/hdVideo`
}

export const creationsHdVideo = async (params: CreationsHdVideoParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreationsHdVideoUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsImageSecretUrl = (params: CreationsImageSecretParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/imageSecret?${stringifiedParams}` : `/creations/imageSecret`
}

export const creationsImageSecret = async (params: CreationsImageSecretParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreationsImageSecretUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsOriginalImageUrl = (params: CreationsOriginalImageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/originalImage?${stringifiedParams}` : `/creations/originalImage`
}

export const creationsOriginalImage = async (params: CreationsOriginalImageParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreationsOriginalImageUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsUpscaledImageUrl = (params: CreationsUpscaledImageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/upscaledImage?${stringifiedParams}` : `/creations/upscaledImage`
}

export const creationsUpscaledImage = async (params: CreationsUpscaledImageParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getCreationsUpscaledImageUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsPurchaseMediaUrl = () => {


  

  return `/creations/purchaseMedia`
}

export const creationsPurchaseMedia = async (creationsPurchaseMediaBody: CreationsPurchaseMediaBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getCreationsPurchaseMediaUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      creationsPurchaseMediaBody,)
  }
);}



export const getCreationsDeleteMediaUrl = () => {


  

  return `/creations/deleteMedia`
}

export const creationsDeleteMedia = async (creationsDeleteMediaBody: CreationsDeleteMediaBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getCreationsDeleteMediaUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      creationsDeleteMediaBody,)
  }
);}



export const getCreationsDeleteRequestUrl = () => {


  

  return `/creations/deleteRequest`
}

export const creationsDeleteRequest = async (creationsDeleteRequestBody: CreationsDeleteRequestBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getCreationsDeleteRequestUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      creationsDeleteRequestBody,)
  }
);}



export const getCreationsSetRequestPrivacyUrl = () => {


  

  return `/creations/setRequestPrivacy`
}

export const creationsSetRequestPrivacy = async (creationsSetRequestPrivacyBody: CreationsSetRequestPrivacyBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getCreationsSetRequestPrivacyUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      creationsSetRequestPrivacyBody,)
  }
);}



export const getCreationsGetUserUploadedImagesUrl = (params?: CreationsGetUserUploadedImagesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/getUserUploadedImages?${stringifiedParams}` : `/creations/getUserUploadedImages`
}

export const creationsGetUserUploadedImages = async (params?: CreationsGetUserUploadedImagesParams, options?: RequestInit): Promise<string[]> => {
  
  return fetcher<string[]>(getCreationsGetUserUploadedImagesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCreationsDeleteUploadedImageUrl = () => {


  

  return `/creations/deleteUploadedImage`
}

export const creationsDeleteUploadedImage = async (creationsDeleteUploadedImageBody: CreationsDeleteUploadedImageBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getCreationsDeleteUploadedImageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      creationsDeleteUploadedImageBody,)
  }
);}



export const getCreationsDescribeUploadedImageUrl = (params: CreationsDescribeUploadedImageParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/creations/describeUploadedImage?${stringifiedParams}` : `/creations/describeUploadedImage`
}

export const creationsDescribeUploadedImage = async (params: CreationsDescribeUploadedImageParams, options?: RequestInit): Promise<CreationsDescribeUploadedImage200> => {
  
  return fetcher<CreationsDescribeUploadedImage200>(getCreationsDescribeUploadedImageUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPointsPackagesAvailableUrl = () => {


  

  return `/points/packagesAvailable`
}

export const pointsPackagesAvailable = async ( options?: RequestInit): Promise<PointsPackagesAvailable200Item[]> => {
  
  return fetcher<PointsPackagesAvailable200Item[]>(getPointsPackagesAvailableUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPointsPricesUrl = () => {


  

  return `/points/prices`
}

export const pointsPrices = async ( options?: RequestInit): Promise<PointsPrices200> => {
  
  return fetcher<PointsPrices200>(getPointsPricesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPointsInitBuyPackageUrl = () => {


  

  return `/points/initBuyPackage`
}

export const pointsInitBuyPackage = async (pointsInitBuyPackageBody: PointsInitBuyPackageBody, options?: RequestInit): Promise<PointsInitBuyPackage200> => {
  
  return fetcher<PointsInitBuyPackage200>(getPointsInitBuyPackageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pointsInitBuyPackageBody,)
  }
);}



export const getPointsFinishBuyPackageUrl = () => {


  

  return `/points/finishBuyPackage`
}

export const pointsFinishBuyPackage = async (pointsFinishBuyPackageBody: PointsFinishBuyPackageBody, options?: RequestInit): Promise<PointsFinishBuyPackage200> => {
  
  return fetcher<PointsFinishBuyPackage200>(getPointsFinishBuyPackageUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pointsFinishBuyPackageBody,)
  }
);}



export const getPointsGetOrdersUrl = () => {


  

  return `/points/getOrders`
}

export const pointsGetOrders = async ( options?: RequestInit): Promise<PointsGetOrders200> => {
  
  return fetcher<PointsGetOrders200>(getPointsGetOrdersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPointsGetOrderUrl = (params: PointsGetOrderParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/points/getOrder?${stringifiedParams}` : `/points/getOrder`
}

export const pointsGetOrder = async (params: PointsGetOrderParams, options?: RequestInit): Promise<PointsGetOrder200> => {
  
  return fetcher<PointsGetOrder200>(getPointsGetOrderUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserGetUrl = (params: UserGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/get?${stringifiedParams}` : `/user/get`
}

export const userGet = async (params: UserGetParams, options?: RequestInit): Promise<UserGet200> => {
  
  return fetcher<UserGet200>(getUserGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserProfileUrl = (params: UserProfileParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/profile?${stringifiedParams}` : `/user/profile`
}

export const userProfile = async (params: UserProfileParams, options?: RequestInit): Promise<UserProfile200> => {
  
  return fetcher<UserProfile200>(getUserProfileUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserPublicProfileUrl = (params: UserPublicProfileParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/publicProfile?${stringifiedParams}` : `/user/publicProfile`
}

export const userPublicProfile = async (params: UserPublicProfileParams, options?: RequestInit): Promise<UserPublicProfile200> => {
  
  return fetcher<UserPublicProfile200>(getUserPublicProfileUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserGetUsernameUrl = (params: UserGetUsernameParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/getUsername?${stringifiedParams}` : `/user/getUsername`
}

export const userGetUsername = async (params: UserGetUsernameParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getUserGetUsernameUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserSetUsernameUrl = () => {


  

  return `/user/setUsername`
}

export const userSetUsername = async (userSetUsernameBody: UserSetUsernameBody, options?: RequestInit): Promise<UserSetUsername200> => {
  
  return fetcher<UserSetUsername200>(getUserSetUsernameUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSetUsernameBody,)
  }
);}



export const getUserSetBioUrl = () => {


  

  return `/user/setBio`
}

export const userSetBio = async (userSetBioBody: UserSetBioBody, options?: RequestInit): Promise<UserSetBio200> => {
  
  return fetcher<UserSetBio200>(getUserSetBioUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSetBioBody,)
  }
);}



export const getUserSendVerificationEmailUrl = () => {


  

  return `/user/sendVerificationEmail`
}

export const userSendVerificationEmail = async (userSendVerificationEmailBody: UserSendVerificationEmailBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getUserSendVerificationEmailUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSendVerificationEmailBody,)
  }
);}



export const getUserPointsHistoryUrl = (params?: UserPointsHistoryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/pointsHistory?${stringifiedParams}` : `/user/pointsHistory`
}

export const userPointsHistory = async (params?: UserPointsHistoryParams, options?: RequestInit): Promise<UserPointsHistory200Item[]> => {
  
  return fetcher<UserPointsHistory200Item[]>(getUserPointsHistoryUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserFindByUsernameUrl = (params: UserFindByUsernameParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/findByUsername?${stringifiedParams}` : `/user/findByUsername`
}

export const userFindByUsername = async (params: UserFindByUsernameParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getUserFindByUsernameUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserFindByEmailUrl = (params: UserFindByEmailParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/findByEmail?${stringifiedParams}` : `/user/findByEmail`
}

export const userFindByEmail = async (params: UserFindByEmailParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getUserFindByEmailUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserFindByPhoneUrl = (params: UserFindByPhoneParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/findByPhone?${stringifiedParams}` : `/user/findByPhone`
}

export const userFindByPhone = async (params: UserFindByPhoneParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getUserFindByPhoneUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserFindByPrivyIdUrl = (params: UserFindByPrivyIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/findByPrivyId?${stringifiedParams}` : `/user/findByPrivyId`
}

export const userFindByPrivyId = async (params: UserFindByPrivyIdParams, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getUserFindByPrivyIdUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserGetNotificationConfigUrl = () => {


  

  return `/user/getNotificationConfig`
}

export const userGetNotificationConfig = async ( options?: RequestInit): Promise<UserGetNotificationConfig200> => {
  
  return fetcher<UserGetNotificationConfig200>(getUserGetNotificationConfigUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUserSetNotificationConfigUrl = () => {


  

  return `/user/setNotificationConfig`
}

export const userSetNotificationConfig = async (userSetNotificationConfigBody: UserSetNotificationConfigBody, options?: RequestInit): Promise<UserSetNotificationConfig200> => {
  
  return fetcher<UserSetNotificationConfig200>(getUserSetNotificationConfigUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSetNotificationConfigBody,)
  }
);}



export const getUserUnsubscribeEmailNotificationsUrl = () => {


  

  return `/user/unsubscribeEmailNotifications`
}

export const userUnsubscribeEmailNotifications = async (userUnsubscribeEmailNotificationsBody: UserUnsubscribeEmailNotificationsBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getUserUnsubscribeEmailNotificationsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userUnsubscribeEmailNotificationsBody,)
  }
);}



export const getUserSetAvatarUrl = () => {


  

  return `/user/setAvatar`
}

export const userSetAvatar = async (userSetAvatarBody: UserSetAvatarBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getUserSetAvatarUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userSetAvatarBody,)
  }
);}



export const getUserAllUsersUrl = () => {


  

  return `/user/allUsers`
}

export const userAllUsers = async ( options?: RequestInit): Promise<UserAllUsers200Item[]> => {
  
  return fetcher<UserAllUsers200Item[]>(getUserAllUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getLoginLinkInitLoginLinkUrl = () => {


  

  return `/loginLink/initLoginLink`
}

export const loginLinkInitLoginLink = async (loginLinkInitLoginLinkBody: LoginLinkInitLoginLinkBody, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getLoginLinkInitLoginLinkUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginLinkInitLoginLinkBody,)
  }
);}



export const getLoginLinkLoginWithLinkUrl = () => {


  

  return `/loginLink/loginWithLink`
}

export const loginLinkLoginWithLink = async (loginLinkLoginWithLinkBody: LoginLinkLoginWithLinkBody, options?: RequestInit): Promise<LoginLinkLoginWithLink200> => {
  
  return fetcher<LoginLinkLoginWithLink200>(getLoginLinkLoginWithLinkUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginLinkLoginWithLinkBody,)
  }
);}



export const getStatsUsersUrl = () => {


  

  return `/stats/users`
}

export const statsUsers = async ( options?: RequestInit): Promise<StatsUsers200> => {
  
  return fetcher<StatsUsers200>(getStatsUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getStatsImagesUrl = () => {


  

  return `/stats/images`
}

export const statsImages = async ( options?: RequestInit): Promise<StatsImages200> => {
  
  return fetcher<StatsImages200>(getStatsImagesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getStatsCollectionsUrl = () => {


  

  return `/stats/collections`
}

export const statsCollections = async ( options?: RequestInit): Promise<StatsCollections200> => {
  
  return fetcher<StatsCollections200>(getStatsCollectionsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getStatsPaymentsUrl = () => {


  

  return `/stats/payments`
}

export const statsPayments = async ( options?: RequestInit): Promise<StatsPayments200> => {
  
  return fetcher<StatsPayments200>(getStatsPaymentsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCollectionsMediaInUsersCollectionUrl = (params: CollectionsMediaInUsersCollectionParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/collections/mediaInUsersCollection?${stringifiedParams}` : `/collections/mediaInUsersCollection`
}

export const collectionsMediaInUsersCollection = async (params: CollectionsMediaInUsersCollectionParams, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getCollectionsMediaInUsersCollectionUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCollectionsLikeMediaUrl = () => {


  

  return `/collections/likeMedia`
}

export const collectionsLikeMedia = async (collectionsLikeMediaBody: CollectionsLikeMediaBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getCollectionsLikeMediaUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      collectionsLikeMediaBody,)
  }
);}



export const getCollectionsUnlikeMediaUrl = () => {


  

  return `/collections/unlikeMedia`
}

export const collectionsUnlikeMedia = async (collectionsUnlikeMediaBody: CollectionsUnlikeMediaBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getCollectionsUnlikeMediaUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      collectionsUnlikeMediaBody,)
  }
);}



export const getCollectionsGetCollectionMetaUrl = (params: CollectionsGetCollectionMetaParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/collections/getCollectionMeta?${stringifiedParams}` : `/collections/getCollectionMeta`
}

export const collectionsGetCollectionMeta = async (params: CollectionsGetCollectionMetaParams, options?: RequestInit): Promise<CollectionsGetCollectionMeta200> => {
  
  return fetcher<CollectionsGetCollectionMeta200>(getCollectionsGetCollectionMetaUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCollectionsFindCollectionByNameUrl = (params: CollectionsFindCollectionByNameParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/collections/findCollectionByName?${stringifiedParams}` : `/collections/findCollectionByName`
}

export const collectionsFindCollectionByName = async (params: CollectionsFindCollectionByNameParams, options?: RequestInit): Promise<CollectionsFindCollectionByName200> => {
  
  return fetcher<CollectionsFindCollectionByName200>(getCollectionsFindCollectionByNameUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCollectionsGetCollectionImagesUrl = (params: CollectionsGetCollectionImagesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/collections/getCollectionImages?${stringifiedParams}` : `/collections/getCollectionImages`
}

export const collectionsGetCollectionImages = async (params: CollectionsGetCollectionImagesParams, options?: RequestInit): Promise<CollectionsGetCollectionImages200Item[]> => {
  
  return fetcher<CollectionsGetCollectionImages200Item[]>(getCollectionsGetCollectionImagesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getCollectionsGetCollectionVideosUrl = (params: CollectionsGetCollectionVideosParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/collections/getCollectionVideos?${stringifiedParams}` : `/collections/getCollectionVideos`
}

export const collectionsGetCollectionVideos = async (params: CollectionsGetCollectionVideosParams, options?: RequestInit): Promise<CollectionsGetCollectionVideos200Item[]> => {
  
  return fetcher<CollectionsGetCollectionVideos200Item[]>(getCollectionsGetCollectionVideosUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPromoCreatePromoCodeUrl = () => {


  

  return `/promo/createPromoCode`
}

export const promoCreatePromoCode = async (promoCreatePromoCodeBody: PromoCreatePromoCodeBody, options?: RequestInit): Promise<PromoCreatePromoCode200> => {
  
  return fetcher<PromoCreatePromoCode200>(getPromoCreatePromoCodeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      promoCreatePromoCodeBody,)
  }
);}



export const getPromoDeletePromoCodeUrl = () => {


  

  return `/promo/deletePromoCode`
}

export const promoDeletePromoCode = async (promoDeletePromoCodeBody: PromoDeletePromoCodeBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPromoDeletePromoCodeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      promoDeletePromoCodeBody,)
  }
);}



export const getPromoGetPromoCodesUrl = () => {


  

  return `/promo/getPromoCodes`
}

export const promoGetPromoCodes = async ( options?: RequestInit): Promise<PromoGetPromoCodes200Item[]> => {
  
  return fetcher<PromoGetPromoCodes200Item[]>(getPromoGetPromoCodesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPromoGetPromoCodeDetailsUrl = (params: PromoGetPromoCodeDetailsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/promo/getPromoCodeDetails?${stringifiedParams}` : `/promo/getPromoCodeDetails`
}

export const promoGetPromoCodeDetails = async (params: PromoGetPromoCodeDetailsParams, options?: RequestInit): Promise<PromoGetPromoCodeDetails200> => {
  
  return fetcher<PromoGetPromoCodeDetails200>(getPromoGetPromoCodeDetailsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPromoClaimPromoCodeUrl = () => {


  

  return `/promo/claimPromoCode`
}

export const promoClaimPromoCode = async (promoClaimPromoCodeBody: PromoClaimPromoCodeBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getPromoClaimPromoCodeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      promoClaimPromoCodeBody,)
  }
);}



export const getPromoCreateAccountWithPromoUrl = () => {


  

  return `/promo/createAccountWithPromo`
}

export const promoCreateAccountWithPromo = async (promoCreateAccountWithPromoBody: PromoCreateAccountWithPromoBody, options?: RequestInit): Promise<PromoCreateAccountWithPromo200> => {
  
  return fetcher<PromoCreateAccountWithPromo200>(getPromoCreateAccountWithPromoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      promoCreateAccountWithPromoBody,)
  }
);}



export const getModelsEditModelUrl = () => {


  

  return `/models/editModel`
}

export const modelsEditModel = async (modelsEditModelBody: ModelsEditModelBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getModelsEditModelUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsEditModelBody,)
  }
);}



export const getModelsGetUserModelsUrl = (params?: ModelsGetUserModelsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getUserModels?${stringifiedParams}` : `/models/getUserModels`
}

export const modelsGetUserModels = async (params?: ModelsGetUserModelsParams, options?: RequestInit): Promise<ModelsGetUserModels200Item[]> => {
  
  return fetcher<ModelsGetUserModels200Item[]>(getModelsGetUserModelsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsCreateModelUrl = () => {


  

  return `/models/createModel`
}

export const modelsCreateModel = async (modelsCreateModelBody: ModelsCreateModelBody, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getModelsCreateModelUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsCreateModelBody,)
  }
);}



export const getModelsGetTrainingStatusUrl = (params: ModelsGetTrainingStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getTrainingStatus?${stringifiedParams}` : `/models/getTrainingStatus`
}

export const modelsGetTrainingStatus = async (params: ModelsGetTrainingStatusParams, options?: RequestInit): Promise<ModelsGetTrainingStatus200> => {
  
  return fetcher<ModelsGetTrainingStatus200>(getModelsGetTrainingStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsDeleteModelUrl = () => {


  

  return `/models/deleteModel`
}

export const modelsDeleteModel = async (modelsDeleteModelBody: ModelsDeleteModelBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getModelsDeleteModelUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsDeleteModelBody,)
  }
);}



export const getModelsGetCustomModelUrl = (params: ModelsGetCustomModelParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getCustomModel?${stringifiedParams}` : `/models/getCustomModel`
}

export const modelsGetCustomModel = async (params: ModelsGetCustomModelParams, options?: RequestInit): Promise<ModelsGetCustomModel200> => {
  
  return fetcher<ModelsGetCustomModel200>(getModelsGetCustomModelUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsGetPublicModelsUrl = (params?: ModelsGetPublicModelsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getPublicModels?${stringifiedParams}` : `/models/getPublicModels`
}

export const modelsGetPublicModels = async (params?: ModelsGetPublicModelsParams, options?: RequestInit): Promise<ModelsGetPublicModels200Item[]> => {
  
  return fetcher<ModelsGetPublicModels200Item[]>(getModelsGetPublicModelsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsGetBaseModelsUrl = (params?: ModelsGetBaseModelsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getBaseModels?${stringifiedParams}` : `/models/getBaseModels`
}

export const modelsGetBaseModels = async (params?: ModelsGetBaseModelsParams, options?: RequestInit): Promise<ModelsGetBaseModels200Item[]> => {
  
  return fetcher<ModelsGetBaseModels200Item[]>(getModelsGetBaseModelsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsGetModelByNameUrl = (params: ModelsGetModelByNameParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/models/getModelByName?${stringifiedParams}` : `/models/getModelByName`
}

export const modelsGetModelByName = async (params: ModelsGetModelByNameParams, options?: RequestInit): Promise<ModelsGetModelByName200> => {
  
  return fetcher<ModelsGetModelByName200>(getModelsGetModelByNameUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getModelsSetModelPrivacyUrl = () => {


  

  return `/models/setModelPrivacy`
}

export const modelsSetModelPrivacy = async (modelsSetModelPrivacyBody: ModelsSetModelPrivacyBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getModelsSetModelPrivacyUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      modelsSetModelPrivacyBody,)
  }
);}



export const getAdminLoginAsUserUrl = () => {


  

  return `/admin/loginAsUser`
}

export const adminLoginAsUser = async (adminLoginAsUserBody: AdminLoginAsUserBody, options?: RequestInit): Promise<string> => {
  
  return fetcher<string>(getAdminLoginAsUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      adminLoginAsUserBody,)
  }
);}



export const getTonomyAuthLoginOrRegisterUrl = () => {


  

  return `/tonomyAuth/loginOrRegister`
}

export const tonomyAuthLoginOrRegister = async (tonomyAuthLoginOrRegisterBody: TonomyAuthLoginOrRegisterBody, options?: RequestInit): Promise<TonomyAuthLoginOrRegister200> => {
  
  return fetcher<TonomyAuthLoginOrRegister200>(getTonomyAuthLoginOrRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      tonomyAuthLoginOrRegisterBody,)
  }
);}



export const getPrivyAuthenticateUrl = () => {


  

  return `/privy/authenticate`
}

export const privyAuthenticate = async (privyAuthenticateBody: PrivyAuthenticateBody, options?: RequestInit): Promise<PrivyAuthenticate200> => {
  
  return fetcher<PrivyAuthenticate200>(getPrivyAuthenticateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      privyAuthenticateBody,)
  }
);}



export const getPrivyLinkCurrentUserUrl = () => {


  

  return `/privy/linkCurrentUser`
}

export const privyLinkCurrentUser = async (privyLinkCurrentUserBody: PrivyLinkCurrentUserBody, options?: RequestInit): Promise<PrivyLinkCurrentUser200> => {
  
  return fetcher<PrivyLinkCurrentUser200>(getPrivyLinkCurrentUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      privyLinkCurrentUserBody,)
  }
);}



export const getPromptTemplatesListUrl = (params?: PromptTemplatesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/promptTemplates/list?${stringifiedParams}` : `/promptTemplates/list`
}

export const promptTemplatesList = async (params?: PromptTemplatesListParams, options?: RequestInit): Promise<PromptTemplatesList200Item[]> => {
  
  return fetcher<PromptTemplatesList200Item[]>(getPromptTemplatesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getTrainingSetsCreateSetUrl = () => {


  

  return `/trainingSets/createSet`
}

export const trainingSetsCreateSet = async (trainingSetsCreateSetBody: TrainingSetsCreateSetBody, options?: RequestInit): Promise<TrainingSetsCreateSet200> => {
  
  return fetcher<TrainingSetsCreateSet200>(getTrainingSetsCreateSetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      trainingSetsCreateSetBody,)
  }
);}



export const getTrainingSetsFinalizeSetUrl = () => {


  

  return `/trainingSets/finalizeSet`
}

export const trainingSetsFinalizeSet = async (trainingSetsFinalizeSetBody: TrainingSetsFinalizeSetBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getTrainingSetsFinalizeSetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      trainingSetsFinalizeSetBody,)
  }
);}



export const getTrainingSetsGetUserSetsUrl = (params: TrainingSetsGetUserSetsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/trainingSets/getUserSets?${stringifiedParams}` : `/trainingSets/getUserSets`
}

export const trainingSetsGetUserSets = async (params: TrainingSetsGetUserSetsParams, options?: RequestInit): Promise<TrainingSetsGetUserSets200Item[]> => {
  
  return fetcher<TrainingSetsGetUserSets200Item[]>(getTrainingSetsGetUserSetsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getTrainingSetsGetSetUrl = (params: TrainingSetsGetSetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/trainingSets/getSet?${stringifiedParams}` : `/trainingSets/getSet`
}

export const trainingSetsGetSet = async (params: TrainingSetsGetSetParams, options?: RequestInit): Promise<TrainingSetsGetSet200> => {
  
  return fetcher<TrainingSetsGetSet200>(getTrainingSetsGetSetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getTrainingSetsDeleteSetUrl = () => {


  

  return `/trainingSets/deleteSet`
}

export const trainingSetsDeleteSet = async (trainingSetsDeleteSetBody: TrainingSetsDeleteSetBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getTrainingSetsDeleteSetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      trainingSetsDeleteSetBody,)
  }
);}



export const getTrainingSetsEditSetUrl = () => {


  

  return `/trainingSets/editSet`
}

export const trainingSetsEditSet = async (trainingSetsEditSetBody: TrainingSetsEditSetBody, options?: RequestInit): Promise<unknown> => {
  
  return fetcher<unknown>(getTrainingSetsEditSetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      trainingSetsEditSetBody,)
  }
);}



export const getTrainingSetsDescribeSetUrl = (params: TrainingSetsDescribeSetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/trainingSets/describeSet?${stringifiedParams}` : `/trainingSets/describeSet`
}

export const trainingSetsDescribeSet = async (params: TrainingSetsDescribeSetParams, options?: RequestInit): Promise<TrainingSetsDescribeSet200> => {
  
  return fetcher<TrainingSetsDescribeSet200>(getTrainingSetsDescribeSetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUpvotesGetWalletUrl = () => {


  

  return `/upvotes/getWallet`
}

export const upvotesGetWallet = async ( options?: RequestInit): Promise<UpvotesGetWallet200> => {
  
  return fetcher<UpvotesGetWallet200>(getUpvotesGetWalletUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUpvotesUpvoteUrl = () => {


  

  return `/upvotes/upvote`
}

export const upvotesUpvote = async (upvotesUpvoteBody: UpvotesUpvoteBody, options?: RequestInit): Promise<UpvotesUpvote200> => {
  
  return fetcher<UpvotesUpvote200>(getUpvotesUpvoteUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      upvotesUpvoteBody,)
  }
);}



export const getUpvotesGetMediaUpvoteCountUrl = (params?: UpvotesGetMediaUpvoteCountParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/upvotes/getMediaUpvoteCount?${stringifiedParams}` : `/upvotes/getMediaUpvoteCount`
}

export const upvotesGetMediaUpvoteCount = async (params?: UpvotesGetMediaUpvoteCountParams, options?: RequestInit): Promise<UpvotesGetMediaUpvoteCount200> => {
  
  return fetcher<UpvotesGetMediaUpvoteCount200>(getUpvotesGetMediaUpvoteCountUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getUpvotesDownvoteUrl = () => {


  

  return `/upvotes/downvote`
}

export const upvotesDownvote = async (upvotesDownvoteBody: UpvotesDownvoteBody, options?: RequestInit): Promise<UpvotesDownvote200> => {
  
  return fetcher<UpvotesDownvote200>(getUpvotesDownvoteUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      upvotesDownvoteBody,)
  }
);}



export const getUpvotesUnhideUrl = () => {


  

  return `/upvotes/unhide`
}

export const upvotesUnhide = async (upvotesUnhideBody: UpvotesUnhideBody, options?: RequestInit): Promise<UpvotesUnhide200> => {
  
  return fetcher<UpvotesUnhide200>(getUpvotesUnhideUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      upvotesUnhideBody,)
  }
);}



export const getUpvotesGetHiddenListUrl = (params?: UpvotesGetHiddenListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/upvotes/getHiddenList?${stringifiedParams}` : `/upvotes/getHiddenList`
}

export const upvotesGetHiddenList = async (params?: UpvotesGetHiddenListParams, options?: RequestInit): Promise<UpvotesGetHiddenList200> => {
  
  return fetcher<UpvotesGetHiddenList200>(getUpvotesGetHiddenListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getPopularityBatchUrl = () => {


  

  return `/popularity/batch`
}

export const popularityBatch = async (popularityBatchBody: PopularityBatchBody, options?: RequestInit): Promise<PopularityBatch200Item[]> => {
  
  return fetcher<PopularityBatch200Item[]>(getPopularityBatchUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      popularityBatchBody,)
  }
);}



export const getEventsPublicEventsUrl = (params?: EventsPublicEventsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/events/publicEvents?${stringifiedParams}` : `/events/publicEvents`
}

export const eventsPublicEvents = async (params?: EventsPublicEventsParams, options?: RequestInit): Promise<EventsPublicEvents200Item[]> => {
  
  return fetcher<EventsPublicEvents200Item[]>(getEventsPublicEventsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getEventsPrivateEventsUrl = (params?: EventsPrivateEventsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/events/privateEvents?${stringifiedParams}` : `/events/privateEvents`
}

export const eventsPrivateEvents = async (params?: EventsPrivateEventsParams, options?: RequestInit): Promise<EventsPrivateEvents200Item[]> => {
  
  return fetcher<EventsPrivateEvents200Item[]>(getEventsPrivateEventsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getEventsMarkEventSeenUrl = () => {


  

  return `/events/markEventSeen`
}

export const eventsMarkEventSeen = async (eventsMarkEventSeenBody: EventsMarkEventSeenBody, options?: RequestInit): Promise<boolean> => {
  
  return fetcher<boolean>(getEventsMarkEventSeenUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      eventsMarkEventSeenBody,)
  }
);}



export const getMissionsListUrl = () => {


  

  return `/missions/list`
}

export const missionsList = async ( options?: RequestInit): Promise<MissionsList200Item[]> => {
  
  return fetcher<MissionsList200Item[]>(getMissionsListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getMissionsProgressUrl = (params: MissionsProgressParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/missions/progress?${stringifiedParams}` : `/missions/progress`
}

export const missionsProgress = async (params: MissionsProgressParams, options?: RequestInit): Promise<MissionsProgress200> => {
  
  return fetcher<MissionsProgress200>(getMissionsProgressUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getMissionsIsClaimedUrl = (params: MissionsIsClaimedParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/missions/isClaimed?${stringifiedParams}` : `/missions/isClaimed`
}

export const missionsIsClaimed = async (params: MissionsIsClaimedParams, options?: RequestInit): Promise<MissionsIsClaimed200> => {
  
  return fetcher<MissionsIsClaimed200>(getMissionsIsClaimedUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getMissionsClaimUrl = () => {


  

  return `/missions/claim`
}

export const missionsClaim = async (missionsClaimBody: MissionsClaimBody, options?: RequestInit): Promise<MissionsClaim200> => {
  
  return fetcher<MissionsClaim200>(getMissionsClaimUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      missionsClaimBody,)
  }
);}



export const getMissionsStatusUrl = (params: MissionsStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/missions/status?${stringifiedParams}` : `/missions/status`
}

export const missionsStatus = async (params: MissionsStatusParams, options?: RequestInit): Promise<MissionsStatus200> => {
  
  return fetcher<MissionsStatus200>(getMissionsStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getMissionsStatusesUrl = (params?: MissionsStatusesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/missions/statuses?${stringifiedParams}` : `/missions/statuses`
}

export const missionsStatuses = async (params?: MissionsStatusesParams, options?: RequestInit): Promise<MissionsStatuses200> => {
  
  return fetcher<MissionsStatuses200>(getMissionsStatusesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getBadgesListUrl = () => {


  

  return `/badges/list`
}

export const badgesList = async ( options?: RequestInit): Promise<BadgesList200Item[]> => {
  
  return fetcher<BadgesList200Item[]>(getBadgesListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getBadgesForUserUrl = (params?: BadgesForUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/badges/forUser?${stringifiedParams}` : `/badges/forUser`
}

export const badgesForUser = async (params?: BadgesForUserParams, options?: RequestInit): Promise<BadgesForUser200Item[]> => {
  
  return fetcher<BadgesForUser200Item[]>(getBadgesForUserUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}
